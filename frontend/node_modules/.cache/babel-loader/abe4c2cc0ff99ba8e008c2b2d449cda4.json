{"ast":null,"code":"var _jsxFileName = \"/Users/kshitij.suri/Documents/Personal Work/nft-chess/src/containers/Game.js\";\n// return a square with the chess piece\nimport React from \"react\";\nimport King from \"../components/King\";\nimport Queen from \"../components/Queen\";\nimport Knight from \"../components/Knight\";\nimport Pawn from \"../components/Pawn\";\nimport Rook from \"../components/Rook\";\nimport Bishop from \"../components/Bishop\";\nimport filler_piece from \"../components/Filler_piece\";\nimport black_defeat_sound from \"../assets/sounds/Black_Defeat.mp3\";\nimport white_defeat_sound from \"../assets/sounds/White_Defeat.mp3\";\nimport capture_sound from \"../assets/sounds/Capture.mp3\";\nimport stalemate_sound from \"../assets/sounds/Stalemate.mp3\";\nimport check_flash_sound from \"../assets/sounds/Check_Flash.mp3\";\nimport check_sound from \"../assets/sounds/Check.mp3\";\nimport move_sound from \"../assets/sounds/Move.mp3\";\nimport style from \"../css/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(props) {\n  if (props.value != null) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"square \" + props.color + props.corner + props.cursor,\n      onClick: props.onClick,\n      children: props.value.icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"square \" + props.color + props.corner + props.cursor,\n      onClick: props.onClick,\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  // initialize the board\n  constructor() {\n    super();\n    this.state = {\n      squares: initializeBoard(),\n      source: -1,\n      turn: \"w\",\n      true_turn: \"w\",\n      turn_num: 0,\n      first_pos: null,\n      second_pos: null,\n      repetition: 0,\n      white_king_has_moved: 0,\n      black_king_has_moved: 0,\n      left_black_rook_has_moved: 0,\n      right_black_rook_has_moved: 0,\n      left_white_rook_has_moved: 0,\n      right_white_rook_has_moved: 0,\n      passant_pos: 65,\n      bot_running: 0,\n      pieces_collected_by_white: [],\n      pieces_collected_by_black: [],\n      history: [initializeBoard()],\n      history_num: 1,\n      history_h1: [null],\n      history_h2: [null],\n      history_h3: [null],\n      history_h4: [null],\n      history_white_collection: [null],\n      history_black_collection: [null],\n      mated: false,\n      move_made: false,\n      capture_made: false,\n      check_flash: false,\n      viewing_history: false,\n      just_clicked: false\n    };\n  } // reset the board\n\n\n  reset() {\n    if (this.state.history_num - 1 == this.state.turn_num && this.state.turn == \"b\" && !this.state.mated) return \"cannot reset\";\n    this.setState({\n      squares: initializeBoard(),\n      source: -1,\n      turn: \"w\",\n      true_turn: \"w\",\n      turn_num: 0,\n      first_pos: null,\n      second_pos: null,\n      repetition: 0,\n      white_king_has_moved: 0,\n      black_king_has_moved: 0,\n      left_black_rook_has_moved: 0,\n      right_black_rook_has_moved: 0,\n      left_white_rook_has_moved: 0,\n      right_white_rook_has_moved: 0,\n      passant_pos: 65,\n      bot_running: 0,\n      pieces_collected_by_white: [],\n      pieces_collected_by_black: [],\n      history: [initializeBoard()],\n      history_num: 1,\n      history_h1: [0],\n      history_h2: [0],\n      history_h3: [null],\n      history_h4: [null],\n      history_white_collection: [null],\n      history_black_collection: [null],\n      mated: false,\n      move_made: false,\n      capture_made: false,\n      check_flash: false,\n      viewing_history: false,\n      just_clicked: false\n    });\n  } // full function for executing a move\n\n\n  execute_move(player, squares, start, end) {\n    let copy_squares = squares.slice(); // clear highlights\n\n    copy_squares = clear_highlight(copy_squares).slice();\n\n    if (player == \"w\") {\n      copy_squares = clear_possible_highlight(copy_squares).slice();\n\n      for (let j = 0; j < 64; j++) {\n        // user has heeded warning\n        if (copy_squares[j].ascii == \"k\") {\n          copy_squares[j].in_check = 0;\n          break;\n        }\n      }\n    } // note if king or rook has moved (castling not allowed if these have moved)\n\n\n    if (copy_squares[start].ascii == (player == \"w\" ? \"k\" : \"K\")) {\n      if (player == \"w\") {\n        this.setState({\n          white_king_has_moved: 1\n        });\n      } else {\n        this.setState({\n          black_king_has_moved: 1\n        });\n      }\n    }\n\n    if (copy_squares[start].ascii == (player == \"w\" ? \"r\" : \"R\")) {\n      if (start == (player == \"w\" ? 56 : 0)) {\n        if (player == \"w\") {\n          this.setState({\n            left_white_rook_has_moved: 1\n          });\n        } else {\n          this.setState({\n            left_black_rook_has_moved: 1\n          });\n        }\n      } else if (start == (player == \"w\" ? 63 : 7)) {\n        if (player == \"w\") {\n          this.setState({\n            right_white_rook_has_moved: 1\n          });\n        } else {\n          this.setState({\n            right_black_rook_has_moved: 1\n          });\n        }\n      }\n    } // add captured pieces to collection\n\n\n    const collection = player == \"w\" ? this.state.pieces_collected_by_white.slice() : this.state.pieces_collected_by_black.slice();\n\n    if (copy_squares[end].ascii != null) {\n      collection.push( /*#__PURE__*/_jsxDEV(Collected, {\n        value: copy_squares[end]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 23\n      }, this));\n      this.setState({\n        capture_made: true\n      });\n    }\n\n    if (copy_squares[start].ascii == (player == \"w\" ? \"p\" : \"P\")) {\n      if (end - start == (player == \"w\" ? -9 : 7)) {\n        // black going down to the left OR white going up to the left\n        if (start - 1 == this.state.passant_pos) collection.push( /*#__PURE__*/_jsxDEV(Collected, {\n          value: copy_squares[start - 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 27\n        }, this));\n      } else if (end - start == (player == \"w\" ? -7 : 9)) {\n        // black going down to the right OR white going up to the right\n        if (start + 1 == this.state.passant_pos) collection.push( /*#__PURE__*/_jsxDEV(Collected, {\n          value: copy_squares[start + 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 27\n        }, this));\n      }\n    } // make the move\n\n\n    copy_squares = this.make_move(copy_squares, start, end).slice(); // en passant helper\n\n    var passant_true = player == \"w\" ? copy_squares[end].ascii == \"p\" && start >= 48 && start <= 55 && end - start == -16 : copy_squares[end].ascii == \"P\" && start >= 8 && start <= 15 && end - start == 16;\n    let passant = passant_true ? end : 65; // highlight mate\n\n    if (player == \"w\") {\n      copy_squares = highlight_mate(\"b\", copy_squares, this.checkmate(\"b\", copy_squares), this.stalemate(\"b\", copy_squares)).slice();\n    } else {\n      copy_squares = highlight_mate(\"w\", copy_squares, this.checkmate(\"w\", copy_squares), this.stalemate(\"w\", copy_squares)).slice();\n    } // adding state to history array\n\n\n    const copy_history = this.state.history.slice();\n    const copy_history_h1 = this.state.history_h1.slice();\n    const copy_history_h2 = this.state.history_h2.slice();\n    const copy_history_h3 = this.state.history_h3.slice();\n    const copy_history_h4 = this.state.history_h4.slice();\n    const copy_white_collection = this.state.history_white_collection.slice();\n    const copy_black_collection = this.state.history_black_collection.slice();\n    copy_history.push(copy_squares);\n    copy_history_h1.push(start);\n    copy_history_h2.push(end);\n    copy_white_collection.push(player == \"w\" ? collection : this.state.pieces_collected_by_white);\n    copy_black_collection.push(player == \"b\" ? collection : this.state.pieces_collected_by_black);\n    var isKing = copy_squares[end].ascii == \"k\" || copy_squares[end].ascii == \"K\";\n\n    if (isKing && Math.abs(end - start) == 2) {\n      if (end == (copy_squares[end].ascii == \"k\" ? 62 : 6)) {\n        copy_history_h3.push(end - 1);\n        copy_history_h4.push(end + 1);\n      } else if (end == (copy_squares[end].ascii == \"k\" ? 58 : 2)) {\n        copy_history_h3.push(end + 1);\n        copy_history_h4.push(end - 2);\n      }\n    } else {\n      copy_history_h3.push(null);\n      copy_history_h4.push(null);\n    }\n\n    let check_mated = this.checkmate(\"w\", copy_squares) || this.checkmate(\"b\", copy_squares);\n    let stale_mated = this.stalemate(\"w\", copy_squares) && player == \"b\" || this.stalemate(\"b\", copy_squares) && player == \"w\";\n    this.setState({\n      passant_pos: passant,\n      history: copy_history,\n      history_num: this.state.history_num + 1,\n      history_h1: copy_history_h1,\n      history_h2: copy_history_h2,\n      history_h3: copy_history_h3,\n      history_h4: copy_history_h4,\n      history_white_collection: copy_white_collection,\n      history_black_collection: copy_black_collection,\n      squares: copy_squares,\n      source: -1,\n      turn_num: this.state.turn_num + 1,\n      mated: check_mated || stale_mated ? true : false,\n      turn: player == \"b\" ? \"w\" : \"b\",\n      true_turn: player == \"b\" ? \"w\" : \"b\",\n      bot_running: player == \"b\" ? 0 : 1,\n      move_made: true\n    }); // set state\n\n    if (player == \"b\") {\n      this.setState({\n        first_pos: start,\n        second_pos: end,\n        pieces_collected_by_black: collection\n      });\n    } else {\n      this.setState({\n        pieces_collected_by_white: collection\n      });\n    }\n  } // make a move\n\n\n  make_move(squares, start, end, passant_pos) {\n    const copy_squares = squares.slice(); // castling\n\n    var isKing = copy_squares[start].ascii == \"k\" || copy_squares[start].ascii == \"K\";\n\n    if (isKing && Math.abs(end - start) == 2) {\n      if (end == (copy_squares[start].ascii == \"k\" ? 62 : 6)) {\n        copy_squares[end - 1] = copy_squares[end + 1];\n        copy_squares[end - 1].highlight = 1;\n        copy_squares[end + 1] = new filler_piece(null);\n        copy_squares[end + 1].highlight = 1;\n      } else if (end == (copy_squares[start].ascii == \"k\" ? 58 : 2)) {\n        copy_squares[end + 1] = copy_squares[end - 2];\n        copy_squares[end + 1].highlight = 1;\n        copy_squares[end - 2] = new filler_piece(null);\n        copy_squares[end - 2].highlight = 1;\n      }\n    } // en passant\n\n\n    var passant = passant_pos == null ? this.state.passant_pos : passant_pos;\n\n    if (copy_squares[start].ascii.toLowerCase() == \"p\") {\n      if (end - start == -7 || end - start == 9) {\n        // white going up to the right\n        if (start + 1 == passant) copy_squares[start + 1] = new filler_piece(null);\n      } else if (end - start == -9 || end - start == 7) {\n        // white going up to the left\n        if (start - 1 == passant) copy_squares[start - 1] = new filler_piece(null);\n      }\n    } // make the move\n\n\n    copy_squares[end] = copy_squares[start];\n    copy_squares[end].highlight = 1;\n    copy_squares[start] = new filler_piece(null);\n    copy_squares[start].highlight = 1; // pawn promotion\n\n    if (copy_squares[end].ascii == \"p\" && end >= 0 && end <= 7) {\n      copy_squares[end] = new Queen(\"w\");\n      copy_squares[end].highlight = 1;\n    }\n\n    if (copy_squares[end].ascii == \"P\" && end >= 56 && end <= 63) {\n      copy_squares[end] = new Queen(\"b\");\n      copy_squares[end].highlight = 1;\n    }\n\n    return copy_squares;\n  } // returns true if castling is allowed\n\n\n  castling_allowed(start, end, squares) {\n    const copy_squares = squares.slice();\n    var player = copy_squares[start].player;\n    var delta_pos = end - start;\n    if (start != (player == \"w\" ? 60 : 4)) return false;\n    if ((delta_pos == 2 ? copy_squares[end + 1].ascii : copy_squares[end - 2].ascii) != (player == \"w\" ? \"r\" : \"R\")) return false;\n    if ((player == \"w\" ? this.state.white_king_has_moved : this.state.black_king_has_moved) != 0) return false;\n\n    if (player == \"w\") {\n      if ((delta_pos == 2 ? this.state.right_white_rook_has_moved : this.state.left_white_rook_has_moved) != 0) return false;\n    } else if (player == \"b\") {\n      if ((delta_pos == 2 ? this.state.right_black_rook_has_moved : this.state.left_black_rook_has_moved) != 0) return false;\n    }\n\n    return true;\n  } // returns true if a piece is trying to skip over another piece\n\n\n  blockers_exist(start, end, squares) {\n    var start_row = 8 - Math.floor(start / 8);\n    var start_col = start % 8 + 1;\n    var end_row = 8 - Math.floor(end / 8);\n    var end_col = end % 8 + 1;\n    let row_diff = end_row - start_row;\n    let col_diff = end_col - start_col;\n    let row_ctr = 0;\n    let col_ctr = 0;\n    const copy_squares = squares.slice(); // return true if the piece in question is skipping over a piece\n\n    while (col_ctr != col_diff || row_ctr != row_diff) {\n      let position = 64 - start_row * 8 + -8 * row_ctr + (start_col - 1 + col_ctr);\n      if (copy_squares[position].ascii != null && copy_squares[position] != copy_squares[start]) return true;\n\n      if (col_ctr != col_diff) {\n        if (col_diff > 0) {\n          ++col_ctr;\n        } else {\n          --col_ctr;\n        }\n      }\n\n      if (row_ctr != row_diff) {\n        if (row_diff > 0) {\n          ++row_ctr;\n        } else {\n          --row_ctr;\n        }\n      }\n    }\n\n    return false;\n  } // return true if pawn is not breaking any of its rules\n\n\n  good_pawn(start, end, squares, passant_pos) {\n    var passant = passant_pos == null ? this.state.passant_pos : passant_pos;\n    var start_row = 8 - Math.floor(start / 8);\n    var start_col = start % 8 + 1;\n    var end_row = 8 - Math.floor(end / 8);\n    var end_col = end % 8 + 1;\n    var row_diff = end_row - start_row;\n    var col_diff = end_col - start_col;\n    const copy_squares = squares.slice(); // only allow 2 space move if the pawn is in the start position\n\n    if (row_diff == 2 || row_diff == -2) {\n      if (copy_squares[start].player == \"w\" && (start < 48 || start > 55)) return false;\n      if (copy_squares[start].player == \"b\" && (start < 8 || start > 15)) return false;\n    } // cannot move up/down if there is a piece\n\n\n    if (copy_squares[end].ascii != null) {\n      if (col_diff == 0) return false;\n    } // cannot move diagonally if there is no piece to capture UNLESS it's en passant\n\n\n    if (row_diff == 1 && col_diff == 1) {\n      // white going up and right\n      if (copy_squares[end].ascii == null) {\n        if (copy_squares[start + 1].ascii != \"P\" || passant != start + 1) return false;\n      }\n    } else if (row_diff == 1 && col_diff == -1) {\n      // white going up and left\n      if (copy_squares[end].ascii == null) {\n        if (copy_squares[start - 1].ascii != \"P\" || passant != start - 1) return false;\n      }\n    } else if (row_diff == -1 && col_diff == 1) {\n      // black going down and right\n      if (copy_squares[end].ascii == null) {\n        if (copy_squares[start + 1].ascii != \"p\" || passant != start + 1) return false;\n      }\n    } else if (row_diff == -1 && col_diff == -1) {\n      // black going down and left\n      if (copy_squares[end].ascii == null) {\n        if (copy_squares[start - 1].ascii != \"p\" || passant != start - 1) return false;\n      }\n    }\n\n    return true;\n  } // return true if move from start to end is illegal\n\n\n  invalid_move(start, end, squares, passant_pos) {\n    const copy_squares = squares.slice(); // if the piece is a bishop, queen, rook, or pawn,\n    // it cannot skip over pieces\n\n    var bqrpk = copy_squares[start].ascii.toLowerCase() == \"r\" || copy_squares[start].ascii.toLowerCase() == \"q\" || copy_squares[start].ascii.toLowerCase() == \"b\" || copy_squares[start].ascii.toLowerCase() == \"p\" || copy_squares[start].ascii.toLowerCase() == \"k\";\n    let invalid = bqrpk == true && this.blockers_exist(start, end, copy_squares) == true;\n    if (invalid) return invalid; // checking for certain rules regarding the pawn\n\n    var pawn = copy_squares[start].ascii.toLowerCase() == \"p\";\n    invalid = pawn == true && this.good_pawn(start, end, copy_squares, passant_pos) == false;\n    if (invalid) return invalid; // checking for if castling is allowed\n\n    var king = copy_squares[start].ascii.toLowerCase() == \"k\";\n    if (king && Math.abs(end - start) == 2) invalid = this.castling_allowed(start, end, copy_squares) == false;\n    return invalid;\n  } // returns true if there are any possible moves\n\n\n  can_move_there(start, end, squares, passant_pos) {\n    const copy_squares = squares.slice();\n    if (start == end) // cannot move to the position you're already sitting in\n      return false; // player cannot capture her own piece\n    // and piece must be able to physically move from start to end\n\n    var player = copy_squares[start].player;\n    if (player == copy_squares[end].player || copy_squares[start].can_move(start, end) == false) return false; // player cannot make an invalid move\n\n    if (this.invalid_move(start, end, copy_squares, passant_pos) == true) return false; // cannot castle if in check\n\n    var cant_castle = copy_squares[start].ascii == (player == \"w\" ? \"k\" : \"K\") && Math.abs(end - start) == 2 && this.in_check(player, copy_squares);\n    if (cant_castle) return false; // king cannot castle through check\n\n    if (copy_squares[start].ascii == (player == \"w\" ? \"k\" : \"K\") && Math.abs(end - start) == 2) {\n      var delta_pos = end - start;\n      const test_squares = squares.slice();\n      test_squares[start + (delta_pos == 2 ? 1 : -1)] = test_squares[start];\n      test_squares[start] = new filler_piece(null);\n      if (this.in_check(player, test_squares)) return false;\n    } // player cannot put or keep herself in check\n\n\n    const check_squares = squares.slice();\n    check_squares[end] = check_squares[start];\n    check_squares[start] = new filler_piece(null);\n\n    if (check_squares[end].ascii == \"p\" && end >= 0 && end <= 7) {\n      check_squares[end] = new Queen(\"w\");\n    } else if (check_squares[end].ascii == \"P\" && end >= 56 && end <= 63) {\n      check_squares[end] = new Queen(\"b\");\n    }\n\n    if (this.in_check(player, check_squares) == true) return false;\n    return true;\n  } // returns true if player is in check\n\n\n  in_check(player, squares) {\n    let king = player == \"w\" ? \"k\" : \"K\";\n    let position_of_king = null;\n    const copy_squares = squares.slice();\n\n    for (let i = 0; i < 64; i++) {\n      if (copy_squares[i].ascii == king) {\n        position_of_king = i;\n        break;\n      }\n    } // traverse through the board and determine\n    // any of the opponent's pieces can legally take the player's king\n\n\n    for (let i = 0; i < 64; i++) {\n      if (copy_squares[i].player != player) {\n        if (copy_squares[i].can_move(i, position_of_king) == true && this.invalid_move(i, position_of_king, copy_squares) == false) return true;\n      }\n    }\n\n    return false;\n  } // return true if player is in stalemate\n\n\n  stalemate(player, squares) {\n    if (this.in_check(player, squares)) return false; // if there is even only 1 way to move her piece,\n    // the player is not in stalemate\n\n    for (let i = 0; i < 64; i++) {\n      if (squares[i].player == player) {\n        for (let j = 0; j < 64; j++) {\n          if (this.can_move_there(i, j, squares)) return false;\n        }\n      }\n    }\n\n    return true;\n  } // return true if player is in checkmate\n\n\n  checkmate(player, squares) {\n    if (!this.in_check(player, squares)) return false; // if there is even only 1 way to move her piece,\n    // the player is not in checkmate\n\n    for (let i = 0; i < 64; i++) {\n      if (squares[i].player == player) {\n        for (let j = 0; j < 64; j++) {\n          if (this.can_move_there(i, j, squares)) return false;\n        }\n      }\n    }\n\n    return true;\n  } // helper function for minimax: calculate black's status using piece values\n\n\n  evaluate_black(squares) {\n    let total_eval = 0;\n\n    for (let i = 0; i < 64; i++) total_eval += get_piece_value(squares[i], i);\n\n    return total_eval;\n  } // helper function for execute_bot: minimax algorithm for chess bot\n\n\n  minimax(depth, is_black_player, alpha, beta, squares, RA_of_starts, RA_of_ends, passant_pos) {\n    const copy_squares = squares.slice();\n\n    if (depth == 0) {\n      return this.evaluate_black(copy_squares);\n    }\n\n    let best_value = is_black_player ? -9999 : 9999; // iterate through the possible start positions\n\n    for (let i = 0; i < 64; i++) {\n      let start = RA_of_starts[i];\n      let isPlayerPiece = copy_squares[start].ascii != null && copy_squares[start].player == (is_black_player ? \"b\" : \"w\"); // start should be the position of a piece owned by the player\n\n      if (isPlayerPiece) {\n        /* iterate through the possible end positions for each possible start position\n         * and use recursion to see what the value of each possible move will be a few moves\n         * down the road. if the move being analyzed is black's turn, the value will maximize\n         * best_value; but if the move being analyzed is white's turn, the value will minimize\n         * best_value\n         */\n        for (let j = 0; j < 64; j++) {\n          let end = RA_of_ends[j];\n\n          if (this.can_move_there(start, end, copy_squares, passant_pos) == true) {\n            const test_squares = squares.slice(); // make the move on test board\n\n            const test_squares_2 = this.make_move(test_squares, start, end, passant_pos).slice(); // en passant helper\n\n            var passant = 65;\n\n            if (test_squares[end].ascii == (is_black_player ? \"P\" : \"p\") && start >= (is_black_player ? 8 : 48) && start <= (is_black_player ? 15 : 55) && end - start == (is_black_player ? 16 : -16)) {\n              passant = end;\n            } // black player maximizes value, white player minimizes value\n\n\n            let value = this.minimax(depth - 1, !is_black_player, alpha, beta, test_squares_2, RA_of_starts, RA_of_ends, passant);\n\n            if (is_black_player) {\n              if (value > best_value) best_value = value;\n              alpha = Math.max(alpha, best_value); //alpha-beta pruning\n\n              if (best_value >= beta) return best_value;\n            } else {\n              if (value < best_value) best_value = value;\n              beta = Math.min(beta, best_value); //alpha-beta pruning\n\n              if (best_value <= alpha) return best_value;\n            }\n          }\n        }\n      }\n    }\n\n    return best_value;\n  } // Chess bot for black player\n\n\n  execute_bot(depth, passed_in_squares) {\n    if (this.state.mated) return \"bot cannot run\";\n    const copy_squares = passed_in_squares.slice();\n    let rand_start = 100;\n    let rand_end = 100;\n    let RA_of_starts = [];\n    let RA_of_ends = [];\n\n    for (let i = 0; i < 64; i++) {\n      RA_of_starts.push(i);\n      RA_of_ends.push(i);\n    }\n\n    RA_of_starts = shuffle(RA_of_starts);\n    RA_of_ends = shuffle(RA_of_ends); // create array of possible moves\n\n    let moves = [];\n\n    for (let i = 0; i < 64; i++) {\n      let start = RA_of_starts[i];\n      let isBlackPiece = copy_squares[start].ascii != null && copy_squares[start].player == \"b\";\n\n      if (isBlackPiece) {\n        for (let j = 0; j < 64; j++) {\n          let end = RA_of_ends[j];\n\n          if (this.can_move_there(start, end, copy_squares) == true) {\n            moves.push(start);\n            moves.push(end);\n          }\n        }\n      }\n    }\n\n    let best_value = -9999;\n    /* iterate through the possible movements and choose the movement from start to end that results in the best\n     * position for black in terms of value calculated by evaluate_black; minimax algo lets bot look ahead a few\n     * moves and thereby pick the move that results in the best value in the long run\n     */\n\n    for (let i = 0; i < moves.length; i += 2) {\n      let start = moves[i];\n      let end = moves[i + 1]; // 3-fold repetiton by bot NOT ALLOWED if there are other move options\n\n      if (moves.length > 2 && this.state.repetition >= 2 && start == this.state.second_pos && end == this.state.first_pos) {\n        this.setState({\n          repetition: 0\n        });\n      } else {\n        const test_squares = passed_in_squares.slice(); // make the move\n\n        const test_squares_2 = this.make_move(test_squares, start, end).slice(); // en passant helper\n\n        var passant_pos = 65;\n        if (test_squares[start].ascii == \"P\" && start >= 8 && start <= 15 && end - start == 16) passant_pos = end; // board evaluation using mini_max algorithm by looking at future turns\n\n        let board_eval = this.minimax(depth - 1, false, -1000, 1000, test_squares_2, RA_of_starts, RA_of_ends, passant_pos);\n\n        if (board_eval >= best_value) {\n          best_value = board_eval;\n          rand_start = start;\n          rand_end = end;\n        }\n      }\n    }\n\n    if (rand_end != 100) {\n      // rand_end == 100 indicates that black is in checkmate/stalemate\n      // increment this.state.repetition if black keeps moving a piece back and forth consecutively\n      if (rand_start == this.state.second_pos && rand_end == this.state.first_pos) {\n        let reps = this.state.repetition + 1;\n        this.setState({\n          repetition: reps\n        });\n      } else {\n        this.setState({\n          repetition: 0\n        });\n      }\n\n      this.execute_move(\"b\", copy_squares, rand_start, rand_end);\n    }\n  } // handle user action of clicking square on board\n\n\n  handleClick(i) {\n    let copy_squares = this.state.squares.slice();\n\n    if (this.state.history_num - 1 != this.state.turn_num) {\n      return \"currently viewing history\";\n    }\n\n    if (this.state.mated) return \"game-over\"; // first click\n\n    if (this.state.source == -1 && this.state.bot_running == 0) {\n      // no source has been selected yet\n      // can only pick a piece that is your own\n      if (copy_squares[i].player != this.state.turn) return -1; //can only pick a piece that is not a blank square\n\n      if (copy_squares[i].player != null) {\n        this.setState({\n          check_flash: false,\n          just_clicked: false,\n          move_made: false,\n          capture_made: false,\n          viewing_history: false\n        });\n        copy_squares = clear_check_highlight(copy_squares, \"w\").slice();\n        copy_squares[i].highlight = 1; // highlight selected piece\n        // highlight legal moves\n\n        for (let j = 0; j < 64; j++) {\n          if (this.can_move_there(i, j, copy_squares)) copy_squares[j].possible = 1;\n        }\n\n        this.setState({\n          source: i,\n          // set the source to the first click\n          squares: copy_squares\n        });\n      }\n    } // second click (to move piece from the source to destination)\n\n\n    if (this.state.source > -1) {\n      var cannibalism = copy_squares[i].player == this.state.turn;\n      /* if user is trying to select one of her other pieces,\n       * change highlight to the new selection, but do not move any pieces\n       */\n\n      if (cannibalism == true && this.state.source != i) {\n        copy_squares[i].highlight = 1;\n        copy_squares[this.state.source].highlight = 0;\n        copy_squares = clear_possible_highlight(copy_squares).slice();\n\n        for (let j = 0; j < 64; j++) {\n          if (this.can_move_there(i, j, copy_squares)) copy_squares[j].possible = 1;\n        }\n\n        this.setState({\n          source: i,\n          // set source to the new clicks\n          squares: copy_squares\n        });\n      } else {\n        // user is trying to move her piece to empty space or to capture opponent's piece\n        if (!this.can_move_there(this.state.source, i, copy_squares)) {\n          // un-highlight selection if invalid move was attempted\n          copy_squares[this.state.source].highlight = 0;\n          copy_squares = clear_possible_highlight(copy_squares).slice(); // if user is in check, highlight king in red if user tries a move that doesn't get her\n          // out of check\n\n          if (i != this.state.source && this.in_check(\"w\", copy_squares) == true) {\n            for (let j = 0; j < 64; j++) {\n              if (copy_squares[j].ascii == \"k\") {\n                copy_squares[j].in_check = 1;\n                break;\n              }\n            }\n\n            this.setState({\n              check_flash: true\n            });\n          }\n\n          this.setState({\n            source: -1,\n            squares: copy_squares\n          });\n          return \"invalid move\";\n        }\n\n        this.execute_move(\"w\", copy_squares, this.state.source, i);\n        setTimeout(() => {\n          this.setState({\n            move_made: false,\n            capture_made: false\n          });\n        }, 200); // chess bot for black player\n\n        let search_depth = 3;\n        setTimeout(() => {\n          this.execute_bot(search_depth, this.state.squares);\n        }, 700);\n      }\n    }\n  } // Render the page\n\n\n  render() {\n    const row_nums = [];\n\n    for (let i = 8; i > 0; i--) {\n      row_nums.push( /*#__PURE__*/_jsxDEV(Label, {\n        value: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 923,\n        columnNumber: 21\n      }, this));\n    }\n\n    const col_nums = [];\n\n    for (let i = 1; i < 9; i++) {\n      let letter;\n\n      switch (i) {\n        case 1:\n          letter = \"A\";\n          break;\n\n        case 2:\n          letter = \"B\";\n          break;\n\n        case 3:\n          letter = \"C\";\n          break;\n\n        case 4:\n          letter = \"D\";\n          break;\n\n        case 5:\n          letter = \"E\";\n          break;\n\n        case 6:\n          letter = \"F\";\n          break;\n\n        case 7:\n          letter = \"G\";\n          break;\n\n        case 8:\n          letter = \"H\";\n          break;\n      }\n\n      col_nums.push( /*#__PURE__*/_jsxDEV(Label, {\n        value: letter\n      }, letter, false, {\n        fileName: _jsxFileName,\n        lineNumber: 954,\n        columnNumber: 21\n      }, this));\n    }\n\n    const board = [];\n\n    for (let i = 0; i < 8; i++) {\n      const squareRows = [];\n\n      for (let j = 0; j < 8; j++) {\n        let square_corner = null;\n\n        if (i == 0 && j == 0) {\n          square_corner = \" top_left_square \";\n        } else if (i == 0 && j == 7) {\n          square_corner = \" top_right_square \";\n        } else if (i == 7 && j == 0) {\n          square_corner = \" bottom_left_square \";\n        } else if (i == 7 && j == 7) {\n          square_corner = \" bottom_right_square \";\n        } else {\n          square_corner = \" \";\n        }\n\n        const copy_squares = this.state.squares.slice();\n        let square_color = calc_squareColor(i, j, copy_squares);\n        let square_cursor = \"pointer\";\n        if (copy_squares[i * 8 + j].player != \"w\") square_cursor = \"default\";\n        if (this.state.bot_running == 1 && !this.state.mated) square_cursor = \"bot_running\";\n        if (this.state.mated) square_cursor = \"default\";\n        if (this.state.history_num - 1 != this.state.turn_num) square_cursor = \"not_allowed\";\n        squareRows.push( /*#__PURE__*/_jsxDEV(Square, {\n          value: copy_squares[i * 8 + j],\n          color: square_color,\n          corner: square_corner,\n          cursor: square_cursor,\n          onClick: () => this.handleClick(i * 8 + j)\n        }, i * 8 + j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 985,\n          columnNumber: 11\n        }, this));\n      }\n\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: squareRows\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 995,\n        columnNumber: 18\n      }, this));\n    }\n\n    let black_mated = this.checkmate(\"b\", this.state.squares);\n    let white_mated = this.checkmate(\"w\", this.state.squares);\n    let not_history = !(this.state.history_num - 1 != this.state.turn_num) && !this.state.viewing_history;\n    let stale = this.stalemate(\"w\", this.state.squares) && this.state.turn == \"w\" || this.stalemate(\"b\", this.state.squares) && this.state.turn == \"b\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.move_made && !this.state.capture_made && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: \"audio_tag\",\n          src: move_sound,\n          controls: true,\n          autoPlay: true,\n          hidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 11\n      }, this), this.state.capture_made && not_history && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: \"audio_tag\",\n          src: capture_sound,\n          controls: true,\n          autoPlay: true,\n          hidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 11\n      }, this), black_mated && not_history && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: \"audio_tag\",\n          src: black_defeat_sound,\n          controls: true,\n          autoPlay: true,\n          hidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1033,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1032,\n        columnNumber: 11\n      }, this), white_mated && not_history && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: \"audio_tag\",\n          src: white_defeat_sound,\n          controls: true,\n          autoPlay: true,\n          hidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1044,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1043,\n        columnNumber: 11\n      }, this), stale && not_history && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: \"audio_tag\",\n          src: stalemate_sound,\n          controls: true,\n          autoPlay: true,\n          hidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1055,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 11\n      }, this), this.state.check_flash && !(this.state.history_num - 1 != this.state.turn_num) && !this.state.just_clicked && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: \"audio_tag\",\n          src: \"../assets/sounds/Check_Flash.mp3\",\n          controls: true,\n          autoPlay: true,\n          hidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bounceInDown\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left_screen bounceInDown\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"side_box\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"header_font\",\n                children: \"ReactJS Chess\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1083,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"medium_font\",\n                children: [\"Play against our friendly bot!\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"./how_to_play.html\",\n                  target: \"_blank\",\n                  children: \"How to Play\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1086,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1084,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1082,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1081,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"side_box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content title\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"header_2_font\",\n                children: \"Match Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1095,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1094,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player_box\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"medium_font\",\n                  children: \"White (You)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1100,\n                  columnNumber: 19\n                }, this), this.state.pieces_collected_by_white]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1099,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player_box black_player_color\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"medium_font\",\n                  children: \"Black (Bot)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1104,\n                  columnNumber: 19\n                }, this), this.state.pieces_collected_by_black]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1103,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1098,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wrapper\",\n              children: [this.state.turn == \"w\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"highlight_box\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1110,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"highlight_box transparent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1112,\n                columnNumber: 19\n              }, this), this.state.turn == \"b\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"highlight_box\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1115,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"highlight_box transparent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1117,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button_wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"reset_button history\",\n                onClick: () => this.viewHistory(\"back_atw\"),\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"button_font\",\n                  children: \"<<\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1126,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1122,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"reset_button history\",\n                onClick: () => this.viewHistory(\"back\"),\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"button_font\",\n                  children: \"<\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1132,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1128,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"reset_button\",\n                onClick: () => this.reset(),\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"button_font\",\n                  children: \"Restart Game\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1135,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1134,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"reset_button history\",\n                onClick: () => this.viewHistory(\"next\"),\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"button_font\",\n                  children: \">\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1141,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1137,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"reset_button history\",\n                onClick: () => this.viewHistory(\"next_atw\"),\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"button_font\",\n                  children: \">>\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1147,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1143,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1121,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mate_wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small_font\",\n                children: this.in_check(\"w\", this.state.squares) && !this.checkmate(\"w\", this.state.squares) == true ? \"You are in check!\" : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1152,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small_font\",\n                children: this.in_check(\"b\", this.state.squares) && !this.checkmate(\"b\", this.state.squares) == true ? \"Black player is in check.\" : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1158,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small_font\",\n                children: this.checkmate(\"w\", this.state.squares) == true ? \"You lost by checkmate.\" : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1164,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small_font\",\n                children: this.checkmate(\"b\", this.state.squares) == true ? \"You won by checkmate!\" : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1169,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small_font\",\n                children: (this.stalemate(\"w\", this.state.squares) && this.state.turn == \"w\") == true ? \"You are in stalemate. Game over.\" : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1174,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small_font\",\n                children: (this.stalemate(\"b\", this.state.squares) && this.state.turn == \"b\") == true ? \"Black is in stalemate. Game over.\" : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1180,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1151,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1093,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1080,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right_screen bounceInDown\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row_label\",\n            children: [\" \", row_nums, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1191,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table\",\n            children: [\" \", board, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col_label\",\n            children: [\" \", col_nums, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1193,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1008,\n      columnNumber: 7\n    }, this);\n  } // view previous turns in the game\n\n\n  viewHistory(direction) {\n    if (this.state.history_num - 1 == this.state.turn_num && this.state.turn == \"b\" && !this.state.mated) {\n      return \"not allowed to view history\";\n    }\n\n    let copy_squares = null;\n    let copy_white_collection = null;\n    let copy_black_collection = null;\n\n    if (direction == \"back_atw\") {\n      copy_squares = this.state.history[0].slice();\n      copy_white_collection = [];\n      copy_black_collection = [];\n    } else if (direction == \"next_atw\" && this.state.history_num < this.state.turn_num + 1) {\n      copy_squares = this.state.history[this.state.turn_num].slice();\n      copy_white_collection = this.state.history_white_collection[this.state.turn_num];\n      copy_black_collection = this.state.history_black_collection[this.state.turn_num];\n    } else if (direction == \"back\" && this.state.history_num - 2 >= 0) {\n      copy_squares = this.state.history[this.state.history_num - 2].slice();\n      copy_white_collection = this.state.history_white_collection[this.state.history_num - 2];\n      copy_black_collection = this.state.history_black_collection[this.state.history_num - 2];\n    } else if (direction == \"next\" && this.state.history_num <= this.state.turn_num) {\n      copy_squares = this.state.history[this.state.history_num].slice();\n      copy_white_collection = this.state.history_white_collection[this.state.history_num];\n      copy_black_collection = this.state.history_black_collection[this.state.history_num];\n    } else {\n      return \"no more history\";\n    }\n\n    copy_squares = clear_possible_highlight(copy_squares).slice();\n    copy_squares = clear_highlight(copy_squares).slice();\n\n    for (let j = 0; j < 64; j++) {\n      if (copy_squares[j].ascii == (this.state.turn == \"w\" ? \"k\" : \"K\")) {\n        copy_squares[j].in_check = 0;\n        copy_squares[j].checked = 0;\n        break;\n      }\n    }\n\n    var stale = this.stalemate(this.state.true_turn, copy_squares) && this.state.turn != this.state.true_turn;\n    copy_squares = highlight_mate(this.state.true_turn, copy_squares, this.checkmate(this.state.true_turn, copy_squares), stale).slice();\n    var index = null;\n    if (direction == \"back\") index = this.state.history_num - 2;else if (direction == \"next\") index = this.state.history_num;else if (direction == \"next_atw\") index = this.state.turn_num;\n\n    if (index != 0 && index != null) {\n      if (this.state.history_h1[index] != null) {\n        copy_squares[this.state.history_h1[index]].highlight = 1;\n        copy_squares[this.state.history_h2[index]].highlight = 1;\n      }\n\n      if (this.state.history_h3[index] != null) {\n        copy_squares[this.state.history_h3[index]].highlight = 1;\n        copy_squares[this.state.history_h4[index]].highlight = 1;\n      }\n    }\n\n    let new_history_num = direction == \"back\" ? this.state.history_num - 1 : this.state.history_num + 1;\n    if (direction == \"back_atw\") new_history_num = 1;\n    if (direction === \"next_atw\") new_history_num = this.state.turn_num + 1;\n    this.setState({\n      viewing_history: true,\n      just_clicked: true,\n      squares: copy_squares,\n      history_num: new_history_num,\n      turn: this.state.turn == \"w\" ? \"b\" : \"w\",\n      pieces_collected_by_white: copy_white_collection != null ? copy_white_collection : this.state.pieces_collected_by_white,\n      pieces_collected_by_black: copy_black_collection != null ? copy_black_collection : this.state.pieces_collected_by_black\n    });\n\n    if (direction == \"back_atw\" || direction == \"next_atw\") {\n      this.setState({\n        turn: direction == \"back_atw\" ? \"w\" : this.state.true_turn\n      });\n    }\n  }\n\n}\n\nclass Game extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1315,\n      columnNumber: 12\n    }, this);\n  }\n\n} // Helper Function for Board Constructor =================\n// initialize the chess board\n\n\nfunction initializeBoard() {\n  const squares = Array(64).fill(null); // black pawns\n\n  for (let i = 8; i < 16; i++) {\n    squares[i] = new Pawn(\"b\");\n  } // white pawns\n\n\n  for (let i = 8 * 6; i < 8 * 6 + 8; i++) {\n    squares[i] = new Pawn(\"w\");\n  } // black knights\n\n\n  squares[1] = new Knight(\"b\");\n  squares[6] = new Knight(\"b\"); // white knights\n\n  squares[56 + 1] = new Knight(\"w\");\n  squares[56 + 6] = new Knight(\"w\"); // black bishops\n\n  squares[2] = new Bishop(\"b\");\n  squares[5] = new Bishop(\"b\"); // white bishops\n\n  squares[56 + 2] = new Bishop(\"w\");\n  squares[56 + 5] = new Bishop(\"w\"); // black rooks\n\n  squares[0] = new Rook(\"b\");\n  squares[7] = new Rook(\"b\"); // white rooks\n\n  squares[56 + 0] = new Rook(\"w\");\n  squares[56 + 7] = new Rook(\"w\"); // black queen & king\n\n  squares[3] = new Queen(\"b\");\n  squares[4] = new King(\"b\"); // white queen & king\n\n  squares[56 + 3] = new Queen(\"w\");\n  squares[56 + 4] = new King(\"w\");\n\n  for (let i = 0; i < 64; i++) {\n    if (squares[i] == null) squares[i] = new filler_piece(null);\n  }\n\n  return squares;\n} // Helper Functions for Chess Bot ========================\n// Fisher-Yates shuffle\n\n\nfunction shuffle(passed_in_array) {\n  const array = passed_in_array.slice();\n\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n\n    [array[i], array[j]] = [array[j], array[i]]; // swap elements\n  }\n\n  return array;\n} // function to reverse an array\n\n\nfunction reverseArray(array) {\n  return array.slice().reverse();\n} // return value of a piece\n\n\nfunction get_piece_value(piece, position) {\n  let pieceValue = 0;\n  if (piece.ascii == null) return 0; // these arrays help adjust the piece's value\n  // depending on where the piece is on the board\n\n  var pawnEvalWhite = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0], [1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0], [0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5], [0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0], [0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5], [0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]];\n  var pawnEvalBlack = reverseArray(pawnEvalWhite);\n  var knightEval = [[-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0], [-4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0], [-3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0], [-3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0], [-3.0, 0.0, 1.5, 2.0, 2.0, 1.5, 0.0, -3.0], [-3.0, 0.5, 1.0, 1.5, 1.5, 1.0, 0.5, -3.0], [-4.0, -2.0, 0.0, 0.5, 0.5, 0.0, -2.0, -4.0], [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]];\n  var bishopEvalWhite = [[-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0], [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0], [-1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0], [-1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0], [-1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0], [-1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0], [-1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0], [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]];\n  var bishopEvalBlack = reverseArray(bishopEvalWhite);\n  var rookEvalWhite = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5], [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5], [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5], [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5], [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5], [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5], [0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0]];\n  var rookEvalBlack = reverseArray(rookEvalWhite);\n  var evalQueen = [[-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0], [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0], [-1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0], [-0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5], [0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5], [-1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0], [-1.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0], [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]];\n  var kingEvalWhite = [[-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0], [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0], [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0], [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0], [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0], [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0], [2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0], [2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0]];\n  var kingEvalBlack = reverseArray(kingEvalWhite);\n  let x = Math.floor(position / 8);\n  let y = position % 8;\n\n  switch (piece.ascii.toLowerCase()) {\n    case \"p\":\n      pieceValue = 100 + 10 * (piece.ascii == \"p\" ? pawnEvalWhite[y][x] : pawnEvalBlack[y][x]);\n      break;\n\n    case \"r\":\n      pieceValue = 525 + 10 * (piece.ascii == \"r\" ? rookEvalWhite[y][x] : rookEvalBlack[y][x]);\n      break;\n\n    case \"n\":\n      pieceValue = 350 + 10 * knightEval[y][x];\n      break;\n\n    case \"b\":\n      pieceValue = 350 + 10 * (piece.ascii == \"b\" ? bishopEvalWhite[y][x] : bishopEvalBlack[y][x]);\n      break;\n\n    case \"q\":\n      pieceValue = 1000 + 10 * evalQueen[y][x];\n      break;\n\n    case \"k\":\n      pieceValue = 10000 + 10 * (piece.ascii == \"k\" ? kingEvalWhite[y][x] : kingEvalBlack[y][x]);\n      break;\n\n    default:\n      pieceValue = 0;\n      break;\n  }\n\n  return piece.player == \"b\" ? pieceValue : -pieceValue;\n} // Helper Functions for Render ===========================\n// return the color of a square for the chess board\n\n\nfunction calc_squareColor(i, j, squares) {\n  let square_color = isEven(i) && isEven(j) || !isEven(i) && !isEven(j) ? \"white_square\" : \"black_square\";\n\n  if (squares[i * 8 + j].highlight == 1) {\n    square_color = isEven(i) && isEven(j) || !isEven(i) && !isEven(j) ? \"selected_white_square\" : \"selected_black_square\";\n  }\n\n  if (squares[i * 8 + j].possible == 1) {\n    square_color = isEven(i) && isEven(j) || !isEven(i) && !isEven(j) ? \"highlighted_white_square\" : \"highlighted_black_square\";\n  }\n\n  if (squares[i * 8 + j].ascii != null && squares[i * 8 + j].ascii.toLowerCase() == \"k\") {\n    if (squares[i * 8 + j].in_check == 1) {\n      square_color = isEven(i) && isEven(j) || !isEven(i) && !isEven(j) ? \"in_check_square_white\" : \"in_check_square_black\";\n    }\n\n    if (squares[i * 8 + j].checked >= 1) {\n      square_color = squares[i * 8 + j].checked == 1 ? \"checked_square\" : \"stale_square\";\n    }\n  }\n\n  return square_color;\n} // return labels for axes of the board\n\n\nfunction Label(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"label\",\n    children: [\" \", props.value, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1530,\n    columnNumber: 10\n  }, this);\n} // helper function to help generate arrays of pieces captured by a player\n\n\n_c2 = Label;\n\nfunction Collected(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"collected\",\n    children: [\" \", props.value.icon, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1534,\n    columnNumber: 10\n  }, this);\n} // Helper Functions to Handle Square Highlighting ========\n// highlight king if in checkmate/stalemate\n\n\n_c3 = Collected;\n\nfunction highlight_mate(player, squares, check_mated, stale_mated) {\n  const copy_squares = squares.slice();\n\n  if (check_mated || stale_mated) {\n    for (let j = 0; j < 64; j++) {\n      if (copy_squares[j].ascii == (player == \"w\" ? \"k\" : \"K\")) {\n        copy_squares[j].checked = check_mated == true ? 1 : 2;\n        break;\n      }\n    }\n  }\n\n  return copy_squares;\n} // clear highlights for squares that are selected\n\n\nfunction clear_highlight(squares) {\n  const copy_squares = squares.slice();\n\n  for (let j = 0; j < 64; j++) {\n    if (copy_squares[j].highlight == 1) copy_squares[j].highlight = 0;\n  }\n\n  return copy_squares;\n} // clear highlights for possible destination squares\n\n\nfunction clear_possible_highlight(squares) {\n  const copy_squares = squares.slice();\n\n  for (let j = 0; j < 64; j++) {\n    if (copy_squares[j].possible == 1) copy_squares[j].possible = 0;\n  }\n\n  return copy_squares;\n} // clear the red higlight for checked king\n\n\nfunction clear_check_highlight(squares, player) {\n  const copy_squares = squares.slice();\n\n  for (let j = 0; j < 64; j++) {\n    if (copy_squares[j].ascii == (player == \"w\" ? \"k\" : \"K\")) {\n      copy_squares[j].in_check = 0; // user has heeded warning\n\n      break;\n    }\n  }\n\n  return copy_squares;\n} // Miscellaneous Functions ===============================\n// return if value is even\n\n\nfunction isEven(value) {\n  return value % 2;\n} // =======================================================\n\n\nexport default Game;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Label\");\n$RefreshReg$(_c3, \"Collected\");","map":{"version":3,"sources":["/Users/kshitij.suri/Documents/Personal Work/nft-chess/src/containers/Game.js"],"names":["React","King","Queen","Knight","Pawn","Rook","Bishop","filler_piece","black_defeat_sound","white_defeat_sound","capture_sound","stalemate_sound","check_flash_sound","check_sound","move_sound","style","Square","props","value","color","corner","cursor","onClick","icon","Board","Component","constructor","state","squares","initializeBoard","source","turn","true_turn","turn_num","first_pos","second_pos","repetition","white_king_has_moved","black_king_has_moved","left_black_rook_has_moved","right_black_rook_has_moved","left_white_rook_has_moved","right_white_rook_has_moved","passant_pos","bot_running","pieces_collected_by_white","pieces_collected_by_black","history","history_num","history_h1","history_h2","history_h3","history_h4","history_white_collection","history_black_collection","mated","move_made","capture_made","check_flash","viewing_history","just_clicked","reset","setState","execute_move","player","start","end","copy_squares","slice","clear_highlight","clear_possible_highlight","j","ascii","in_check","collection","push","make_move","passant_true","passant","highlight_mate","checkmate","stalemate","copy_history","copy_history_h1","copy_history_h2","copy_history_h3","copy_history_h4","copy_white_collection","copy_black_collection","isKing","Math","abs","check_mated","stale_mated","highlight","toLowerCase","castling_allowed","delta_pos","blockers_exist","start_row","floor","start_col","end_row","end_col","row_diff","col_diff","row_ctr","col_ctr","position","good_pawn","invalid_move","bqrpk","invalid","pawn","king","can_move_there","can_move","cant_castle","test_squares","check_squares","position_of_king","i","evaluate_black","total_eval","get_piece_value","minimax","depth","is_black_player","alpha","beta","RA_of_starts","RA_of_ends","best_value","isPlayerPiece","test_squares_2","max","min","execute_bot","passed_in_squares","rand_start","rand_end","shuffle","moves","isBlackPiece","length","board_eval","reps","handleClick","clear_check_highlight","possible","cannibalism","setTimeout","search_depth","render","row_nums","col_nums","letter","board","squareRows","square_corner","square_color","calc_squareColor","square_cursor","black_mated","white_mated","not_history","stale","viewHistory","direction","checked","index","new_history_num","Game","Array","fill","passed_in_array","array","random","reverseArray","reverse","piece","pieceValue","pawnEvalWhite","pawnEvalBlack","knightEval","bishopEvalWhite","bishopEvalBlack","rookEvalWhite","rookEvalBlack","evalQueen","kingEvalWhite","kingEvalBlack","x","y","isEven","Label","Collected"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAIA,KAAK,CAACC,KAAN,IAAe,IAAnB,EAAyB;AACvB,wBACE;AACE,MAAA,SAAS,EAAE,YAAYD,KAAK,CAACE,KAAlB,GAA0BF,KAAK,CAACG,MAAhC,GAAyCH,KAAK,CAACI,MAD5D;AAEE,MAAA,OAAO,EAAEJ,KAAK,CAACK,OAFjB;AAAA,gBAIGL,KAAK,CAACC,KAAN,CAAYK;AAJf;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GATD,MASO;AACL,wBACE;AACE,MAAA,SAAS,EAAE,YAAYN,KAAK,CAACE,KAAlB,GAA0BF,KAAK,CAACG,MAAhC,GAAyCH,KAAK,CAACI,MAD5D;AAEE,MAAA,OAAO,EAAEJ,KAAK,CAACK,OAFjB;AAAA,gBAIG;AAJH;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;AACF;;KApBQN,M;;AAsBT,MAAMQ,KAAN,SAAoBxB,KAAK,CAACyB,SAA1B,CAAoC;AAClC;AACAC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAEC,eAAe,EADb;AAEXC,MAAAA,MAAM,EAAE,CAAC,CAFE;AAGXC,MAAAA,IAAI,EAAE,GAHK;AAIXC,MAAAA,SAAS,EAAE,GAJA;AAKXC,MAAAA,QAAQ,EAAE,CALC;AAMXC,MAAAA,SAAS,EAAE,IANA;AAOXC,MAAAA,UAAU,EAAE,IAPD;AAQXC,MAAAA,UAAU,EAAE,CARD;AASXC,MAAAA,oBAAoB,EAAE,CATX;AAUXC,MAAAA,oBAAoB,EAAE,CAVX;AAWXC,MAAAA,yBAAyB,EAAE,CAXhB;AAYXC,MAAAA,0BAA0B,EAAE,CAZjB;AAaXC,MAAAA,yBAAyB,EAAE,CAbhB;AAcXC,MAAAA,0BAA0B,EAAE,CAdjB;AAeXC,MAAAA,WAAW,EAAE,EAfF;AAgBXC,MAAAA,WAAW,EAAE,CAhBF;AAiBXC,MAAAA,yBAAyB,EAAE,EAjBhB;AAkBXC,MAAAA,yBAAyB,EAAE,EAlBhB;AAmBXC,MAAAA,OAAO,EAAE,CAAClB,eAAe,EAAhB,CAnBE;AAoBXmB,MAAAA,WAAW,EAAE,CApBF;AAqBXC,MAAAA,UAAU,EAAE,CAAC,IAAD,CArBD;AAsBXC,MAAAA,UAAU,EAAE,CAAC,IAAD,CAtBD;AAuBXC,MAAAA,UAAU,EAAE,CAAC,IAAD,CAvBD;AAwBXC,MAAAA,UAAU,EAAE,CAAC,IAAD,CAxBD;AAyBXC,MAAAA,wBAAwB,EAAE,CAAC,IAAD,CAzBf;AA0BXC,MAAAA,wBAAwB,EAAE,CAAC,IAAD,CA1Bf;AA2BXC,MAAAA,KAAK,EAAE,KA3BI;AA4BXC,MAAAA,SAAS,EAAE,KA5BA;AA6BXC,MAAAA,YAAY,EAAE,KA7BH;AA8BXC,MAAAA,WAAW,EAAE,KA9BF;AA+BXC,MAAAA,eAAe,EAAE,KA/BN;AAgCXC,MAAAA,YAAY,EAAE;AAhCH,KAAb;AAkCD,GAtCiC,CAwClC;;;AACAC,EAAAA,KAAK,GAAG;AACN,QACE,KAAKlC,KAAL,CAAWqB,WAAX,GAAyB,CAAzB,IAA8B,KAAKrB,KAAL,CAAWM,QAAzC,IACA,KAAKN,KAAL,CAAWI,IAAX,IAAmB,GADnB,IAEA,CAAC,KAAKJ,KAAL,CAAW4B,KAHd,EAKE,OAAO,cAAP;AACF,SAAKO,QAAL,CAAc;AACZlC,MAAAA,OAAO,EAAEC,eAAe,EADZ;AAEZC,MAAAA,MAAM,EAAE,CAAC,CAFG;AAGZC,MAAAA,IAAI,EAAE,GAHM;AAIZC,MAAAA,SAAS,EAAE,GAJC;AAKZC,MAAAA,QAAQ,EAAE,CALE;AAMZC,MAAAA,SAAS,EAAE,IANC;AAOZC,MAAAA,UAAU,EAAE,IAPA;AAQZC,MAAAA,UAAU,EAAE,CARA;AASZC,MAAAA,oBAAoB,EAAE,CATV;AAUZC,MAAAA,oBAAoB,EAAE,CAVV;AAWZC,MAAAA,yBAAyB,EAAE,CAXf;AAYZC,MAAAA,0BAA0B,EAAE,CAZhB;AAaZC,MAAAA,yBAAyB,EAAE,CAbf;AAcZC,MAAAA,0BAA0B,EAAE,CAdhB;AAeZC,MAAAA,WAAW,EAAE,EAfD;AAgBZC,MAAAA,WAAW,EAAE,CAhBD;AAiBZC,MAAAA,yBAAyB,EAAE,EAjBf;AAkBZC,MAAAA,yBAAyB,EAAE,EAlBf;AAmBZC,MAAAA,OAAO,EAAE,CAAClB,eAAe,EAAhB,CAnBG;AAoBZmB,MAAAA,WAAW,EAAE,CApBD;AAqBZC,MAAAA,UAAU,EAAE,CAAC,CAAD,CArBA;AAsBZC,MAAAA,UAAU,EAAE,CAAC,CAAD,CAtBA;AAuBZC,MAAAA,UAAU,EAAE,CAAC,IAAD,CAvBA;AAwBZC,MAAAA,UAAU,EAAE,CAAC,IAAD,CAxBA;AAyBZC,MAAAA,wBAAwB,EAAE,CAAC,IAAD,CAzBd;AA0BZC,MAAAA,wBAAwB,EAAE,CAAC,IAAD,CA1Bd;AA2BZC,MAAAA,KAAK,EAAE,KA3BK;AA4BZC,MAAAA,SAAS,EAAE,KA5BC;AA6BZC,MAAAA,YAAY,EAAE,KA7BF;AA8BZC,MAAAA,WAAW,EAAE,KA9BD;AA+BZC,MAAAA,eAAe,EAAE,KA/BL;AAgCZC,MAAAA,YAAY,EAAE;AAhCF,KAAd;AAkCD,GAlFiC,CAoFlC;;;AACAG,EAAAA,YAAY,CAACC,MAAD,EAASpC,OAAT,EAAkBqC,KAAlB,EAAyBC,GAAzB,EAA8B;AACxC,QAAIC,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAAnB,CADwC,CAGxC;;AACAD,IAAAA,YAAY,GAAGE,eAAe,CAACF,YAAD,CAAf,CAA8BC,KAA9B,EAAf;;AACA,QAAIJ,MAAM,IAAI,GAAd,EAAmB;AACjBG,MAAAA,YAAY,GAAGG,wBAAwB,CAACH,YAAD,CAAxB,CAAuCC,KAAvC,EAAf;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B;AACA,YAAIJ,YAAY,CAACI,CAAD,CAAZ,CAAgBC,KAAhB,IAAyB,GAA7B,EAAkC;AAChCL,UAAAA,YAAY,CAACI,CAAD,CAAZ,CAAgBE,QAAhB,GAA2B,CAA3B;AACA;AACD;AACF;AACF,KAduC,CAgBxC;;;AACA,QAAIN,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,KAA8BR,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAApD,CAAJ,EAA8D;AAC5D,UAAIA,MAAM,IAAI,GAAd,EAAmB;AACjB,aAAKF,QAAL,CAAc;AACZzB,UAAAA,oBAAoB,EAAE;AADV,SAAd;AAGD,OAJD,MAIO;AACL,aAAKyB,QAAL,CAAc;AACZxB,UAAAA,oBAAoB,EAAE;AADV,SAAd;AAGD;AACF;;AACD,QAAI6B,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,KAA8BR,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAApD,CAAJ,EAA8D;AAC5D,UAAIC,KAAK,KAAKD,MAAM,IAAI,GAAV,GAAgB,EAAhB,GAAqB,CAA1B,CAAT,EAAuC;AACrC,YAAIA,MAAM,IAAI,GAAd,EAAmB;AACjB,eAAKF,QAAL,CAAc;AACZrB,YAAAA,yBAAyB,EAAE;AADf,WAAd;AAGD,SAJD,MAIO;AACL,eAAKqB,QAAL,CAAc;AACZvB,YAAAA,yBAAyB,EAAE;AADf,WAAd;AAGD;AACF,OAVD,MAUO,IAAI0B,KAAK,KAAKD,MAAM,IAAI,GAAV,GAAgB,EAAhB,GAAqB,CAA1B,CAAT,EAAuC;AAC5C,YAAIA,MAAM,IAAI,GAAd,EAAmB;AACjB,eAAKF,QAAL,CAAc;AACZpB,YAAAA,0BAA0B,EAAE;AADhB,WAAd;AAGD,SAJD,MAIO;AACL,eAAKoB,QAAL,CAAc;AACZtB,YAAAA,0BAA0B,EAAE;AADhB,WAAd;AAGD;AACF;AACF,KAlDuC,CAoDxC;;;AACA,UAAMkC,UAAU,GACdV,MAAM,IAAI,GAAV,GACI,KAAKrC,KAAL,CAAWkB,yBAAX,CAAqCuB,KAArC,EADJ,GAEI,KAAKzC,KAAL,CAAWmB,yBAAX,CAAqCsB,KAArC,EAHN;;AAIA,QAAID,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,IAA/B,EAAqC;AACnCE,MAAAA,UAAU,CAACC,IAAX,eAAgB,QAAC,SAAD;AAAW,QAAA,KAAK,EAAER,YAAY,CAACD,GAAD;AAA9B;AAAA;AAAA;AAAA;AAAA,cAAhB;AACA,WAAKJ,QAAL,CAAc;AACZL,QAAAA,YAAY,EAAE;AADF,OAAd;AAGD;;AACD,QAAIU,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,KAA8BR,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAApD,CAAJ,EAA8D;AAC5D,UAAIE,GAAG,GAAGD,KAAN,KAAgBD,MAAM,IAAI,GAAV,GAAgB,CAAC,CAAjB,GAAqB,CAArC,CAAJ,EAA6C;AAC3C;AACA,YAAIC,KAAK,GAAG,CAAR,IAAa,KAAKtC,KAAL,CAAWgB,WAA5B,EACE+B,UAAU,CAACC,IAAX,eAAgB,QAAC,SAAD;AAAW,UAAA,KAAK,EAAER,YAAY,CAACF,KAAK,GAAG,CAAT;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAAhB;AACH,OAJD,MAIO,IAAIC,GAAG,GAAGD,KAAN,KAAgBD,MAAM,IAAI,GAAV,GAAgB,CAAC,CAAjB,GAAqB,CAArC,CAAJ,EAA6C;AAClD;AACA,YAAIC,KAAK,GAAG,CAAR,IAAa,KAAKtC,KAAL,CAAWgB,WAA5B,EACE+B,UAAU,CAACC,IAAX,eAAgB,QAAC,SAAD;AAAW,UAAA,KAAK,EAAER,YAAY,CAACF,KAAK,GAAG,CAAT;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAAhB;AACH;AACF,KAzEuC,CA2ExC;;;AACAE,IAAAA,YAAY,GAAG,KAAKS,SAAL,CAAeT,YAAf,EAA6BF,KAA7B,EAAoCC,GAApC,EAAyCE,KAAzC,EAAf,CA5EwC,CA8ExC;;AACA,QAAIS,YAAY,GACdb,MAAM,IAAI,GAAV,GACIG,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,GAA3B,IACAP,KAAK,IAAI,EADT,IAEAA,KAAK,IAAI,EAFT,IAGAC,GAAG,GAAGD,KAAN,IAAe,CAAC,EAJpB,GAKIE,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,GAA3B,IACAP,KAAK,IAAI,CADT,IAEAA,KAAK,IAAI,EAFT,IAGAC,GAAG,GAAGD,KAAN,IAAe,EATrB;AAUA,QAAIa,OAAO,GAAGD,YAAY,GAAGX,GAAH,GAAS,EAAnC,CAzFwC,CA2FxC;;AACA,QAAIF,MAAM,IAAI,GAAd,EAAmB;AACjBG,MAAAA,YAAY,GAAGY,cAAc,CAC3B,GAD2B,EAE3BZ,YAF2B,EAG3B,KAAKa,SAAL,CAAe,GAAf,EAAoBb,YAApB,CAH2B,EAI3B,KAAKc,SAAL,CAAe,GAAf,EAAoBd,YAApB,CAJ2B,CAAd,CAKbC,KALa,EAAf;AAMD,KAPD,MAOO;AACLD,MAAAA,YAAY,GAAGY,cAAc,CAC3B,GAD2B,EAE3BZ,YAF2B,EAG3B,KAAKa,SAAL,CAAe,GAAf,EAAoBb,YAApB,CAH2B,EAI3B,KAAKc,SAAL,CAAe,GAAf,EAAoBd,YAApB,CAJ2B,CAAd,CAKbC,KALa,EAAf;AAMD,KA1GuC,CA4GxC;;;AACA,UAAMc,YAAY,GAAG,KAAKvD,KAAL,CAAWoB,OAAX,CAAmBqB,KAAnB,EAArB;AACA,UAAMe,eAAe,GAAG,KAAKxD,KAAL,CAAWsB,UAAX,CAAsBmB,KAAtB,EAAxB;AACA,UAAMgB,eAAe,GAAG,KAAKzD,KAAL,CAAWuB,UAAX,CAAsBkB,KAAtB,EAAxB;AACA,UAAMiB,eAAe,GAAG,KAAK1D,KAAL,CAAWwB,UAAX,CAAsBiB,KAAtB,EAAxB;AACA,UAAMkB,eAAe,GAAG,KAAK3D,KAAL,CAAWyB,UAAX,CAAsBgB,KAAtB,EAAxB;AACA,UAAMmB,qBAAqB,GAAG,KAAK5D,KAAL,CAAW0B,wBAAX,CAAoCe,KAApC,EAA9B;AACA,UAAMoB,qBAAqB,GAAG,KAAK7D,KAAL,CAAW2B,wBAAX,CAAoCc,KAApC,EAA9B;AACAc,IAAAA,YAAY,CAACP,IAAb,CAAkBR,YAAlB;AACAgB,IAAAA,eAAe,CAACR,IAAhB,CAAqBV,KAArB;AACAmB,IAAAA,eAAe,CAACT,IAAhB,CAAqBT,GAArB;AACAqB,IAAAA,qBAAqB,CAACZ,IAAtB,CACEX,MAAM,IAAI,GAAV,GAAgBU,UAAhB,GAA6B,KAAK/C,KAAL,CAAWkB,yBAD1C;AAGA2C,IAAAA,qBAAqB,CAACb,IAAtB,CACEX,MAAM,IAAI,GAAV,GAAgBU,UAAhB,GAA6B,KAAK/C,KAAL,CAAWmB,yBAD1C;AAIA,QAAI2C,MAAM,GACRtB,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,GAA3B,IAAkCL,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,GAD/D;;AAEA,QAAIiB,MAAM,IAAIC,IAAI,CAACC,GAAL,CAASzB,GAAG,GAAGD,KAAf,KAAyB,CAAvC,EAA0C;AACxC,UAAIC,GAAG,KAAKC,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,GAA3B,GAAiC,EAAjC,GAAsC,CAA3C,CAAP,EAAsD;AACpDa,QAAAA,eAAe,CAACV,IAAhB,CAAqBT,GAAG,GAAG,CAA3B;AACAoB,QAAAA,eAAe,CAACX,IAAhB,CAAqBT,GAAG,GAAG,CAA3B;AACD,OAHD,MAGO,IAAIA,GAAG,KAAKC,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,GAA3B,GAAiC,EAAjC,GAAsC,CAA3C,CAAP,EAAsD;AAC3Da,QAAAA,eAAe,CAACV,IAAhB,CAAqBT,GAAG,GAAG,CAA3B;AACAoB,QAAAA,eAAe,CAACX,IAAhB,CAAqBT,GAAG,GAAG,CAA3B;AACD;AACF,KARD,MAQO;AACLmB,MAAAA,eAAe,CAACV,IAAhB,CAAqB,IAArB;AACAW,MAAAA,eAAe,CAACX,IAAhB,CAAqB,IAArB;AACD;;AAED,QAAIiB,WAAW,GACb,KAAKZ,SAAL,CAAe,GAAf,EAAoBb,YAApB,KAAqC,KAAKa,SAAL,CAAe,GAAf,EAAoBb,YAApB,CADvC;AAEA,QAAI0B,WAAW,GACZ,KAAKZ,SAAL,CAAe,GAAf,EAAoBd,YAApB,KAAqCH,MAAM,IAAI,GAAhD,IACC,KAAKiB,SAAL,CAAe,GAAf,EAAoBd,YAApB,KAAqCH,MAAM,IAAI,GAFlD;AAIA,SAAKF,QAAL,CAAc;AACZnB,MAAAA,WAAW,EAAEmC,OADD;AAEZ/B,MAAAA,OAAO,EAAEmC,YAFG;AAGZlC,MAAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWqB,WAAX,GAAyB,CAH1B;AAIZC,MAAAA,UAAU,EAAEkC,eAJA;AAKZjC,MAAAA,UAAU,EAAEkC,eALA;AAMZjC,MAAAA,UAAU,EAAEkC,eANA;AAOZjC,MAAAA,UAAU,EAAEkC,eAPA;AAQZjC,MAAAA,wBAAwB,EAAEkC,qBARd;AASZjC,MAAAA,wBAAwB,EAAEkC,qBATd;AAUZ5D,MAAAA,OAAO,EAAEuC,YAVG;AAWZrC,MAAAA,MAAM,EAAE,CAAC,CAXG;AAYZG,MAAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWM,QAAX,GAAsB,CAZpB;AAaZsB,MAAAA,KAAK,EAAEqC,WAAW,IAAIC,WAAf,GAA6B,IAA7B,GAAoC,KAb/B;AAcZ9D,MAAAA,IAAI,EAAEiC,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAdhB;AAeZhC,MAAAA,SAAS,EAAEgC,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAfrB;AAgBZpB,MAAAA,WAAW,EAAEoB,MAAM,IAAI,GAAV,GAAgB,CAAhB,GAAoB,CAhBrB;AAiBZR,MAAAA,SAAS,EAAE;AAjBC,KAAd,EAnJwC,CAuKxC;;AACA,QAAIQ,MAAM,IAAI,GAAd,EAAmB;AACjB,WAAKF,QAAL,CAAc;AACZ5B,QAAAA,SAAS,EAAE+B,KADC;AAEZ9B,QAAAA,UAAU,EAAE+B,GAFA;AAGZpB,QAAAA,yBAAyB,EAAE4B;AAHf,OAAd;AAKD,KAND,MAMO;AACL,WAAKZ,QAAL,CAAc;AACZjB,QAAAA,yBAAyB,EAAE6B;AADf,OAAd;AAGD;AACF,GAxQiC,CA0QlC;;;AACAE,EAAAA,SAAS,CAAChD,OAAD,EAAUqC,KAAV,EAAiBC,GAAjB,EAAsBvB,WAAtB,EAAmC;AAC1C,UAAMwB,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB,CAD0C,CAE1C;;AACA,QAAIqB,MAAM,GACRtB,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,IAA6B,GAA7B,IAAoCL,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,IAA6B,GADnE;;AAEA,QAAIiB,MAAM,IAAIC,IAAI,CAACC,GAAL,CAASzB,GAAG,GAAGD,KAAf,KAAyB,CAAvC,EAA0C;AACxC,UAAIC,GAAG,KAAKC,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,IAA6B,GAA7B,GAAmC,EAAnC,GAAwC,CAA7C,CAAP,EAAwD;AACtDL,QAAAA,YAAY,CAACD,GAAG,GAAG,CAAP,CAAZ,GAAwBC,YAAY,CAACD,GAAG,GAAG,CAAP,CAApC;AACAC,QAAAA,YAAY,CAACD,GAAG,GAAG,CAAP,CAAZ,CAAsB4B,SAAtB,GAAkC,CAAlC;AACA3B,QAAAA,YAAY,CAACD,GAAG,GAAG,CAAP,CAAZ,GAAwB,IAAI3D,YAAJ,CAAiB,IAAjB,CAAxB;AACA4D,QAAAA,YAAY,CAACD,GAAG,GAAG,CAAP,CAAZ,CAAsB4B,SAAtB,GAAkC,CAAlC;AACD,OALD,MAKO,IAAI5B,GAAG,KAAKC,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,IAA6B,GAA7B,GAAmC,EAAnC,GAAwC,CAA7C,CAAP,EAAwD;AAC7DL,QAAAA,YAAY,CAACD,GAAG,GAAG,CAAP,CAAZ,GAAwBC,YAAY,CAACD,GAAG,GAAG,CAAP,CAApC;AACAC,QAAAA,YAAY,CAACD,GAAG,GAAG,CAAP,CAAZ,CAAsB4B,SAAtB,GAAkC,CAAlC;AACA3B,QAAAA,YAAY,CAACD,GAAG,GAAG,CAAP,CAAZ,GAAwB,IAAI3D,YAAJ,CAAiB,IAAjB,CAAxB;AACA4D,QAAAA,YAAY,CAACD,GAAG,GAAG,CAAP,CAAZ,CAAsB4B,SAAtB,GAAkC,CAAlC;AACD;AACF,KAjByC,CAmB1C;;;AACA,QAAIhB,OAAO,GAAGnC,WAAW,IAAI,IAAf,GAAsB,KAAKhB,KAAL,CAAWgB,WAAjC,GAA+CA,WAA7D;;AACA,QAAIwB,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,CAA0BuB,WAA1B,MAA2C,GAA/C,EAAoD;AAClD,UAAI7B,GAAG,GAAGD,KAAN,IAAe,CAAC,CAAhB,IAAqBC,GAAG,GAAGD,KAAN,IAAe,CAAxC,EAA2C;AACzC;AACA,YAAIA,KAAK,GAAG,CAAR,IAAaa,OAAjB,EACEX,YAAY,CAACF,KAAK,GAAG,CAAT,CAAZ,GAA0B,IAAI1D,YAAJ,CAAiB,IAAjB,CAA1B;AACH,OAJD,MAIO,IAAI2D,GAAG,GAAGD,KAAN,IAAe,CAAC,CAAhB,IAAqBC,GAAG,GAAGD,KAAN,IAAe,CAAxC,EAA2C;AAChD;AACA,YAAIA,KAAK,GAAG,CAAR,IAAaa,OAAjB,EACEX,YAAY,CAACF,KAAK,GAAG,CAAT,CAAZ,GAA0B,IAAI1D,YAAJ,CAAiB,IAAjB,CAA1B;AACH;AACF,KA/ByC,CAiC1C;;;AACA4D,IAAAA,YAAY,CAACD,GAAD,CAAZ,GAAoBC,YAAY,CAACF,KAAD,CAAhC;AACAE,IAAAA,YAAY,CAACD,GAAD,CAAZ,CAAkB4B,SAAlB,GAA8B,CAA9B;AACA3B,IAAAA,YAAY,CAACF,KAAD,CAAZ,GAAsB,IAAI1D,YAAJ,CAAiB,IAAjB,CAAtB;AACA4D,IAAAA,YAAY,CAACF,KAAD,CAAZ,CAAoB6B,SAApB,GAAgC,CAAhC,CArC0C,CAuC1C;;AACA,QAAI3B,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,GAA3B,IAAkCN,GAAG,IAAI,CAAzC,IAA8CA,GAAG,IAAI,CAAzD,EAA4D;AAC1DC,MAAAA,YAAY,CAACD,GAAD,CAAZ,GAAoB,IAAIhE,KAAJ,CAAU,GAAV,CAApB;AACAiE,MAAAA,YAAY,CAACD,GAAD,CAAZ,CAAkB4B,SAAlB,GAA8B,CAA9B;AACD;;AACD,QAAI3B,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,GAA3B,IAAkCN,GAAG,IAAI,EAAzC,IAA+CA,GAAG,IAAI,EAA1D,EAA8D;AAC5DC,MAAAA,YAAY,CAACD,GAAD,CAAZ,GAAoB,IAAIhE,KAAJ,CAAU,GAAV,CAApB;AACAiE,MAAAA,YAAY,CAACD,GAAD,CAAZ,CAAkB4B,SAAlB,GAA8B,CAA9B;AACD;;AAED,WAAO3B,YAAP;AACD,GA7TiC,CA+TlC;;;AACA6B,EAAAA,gBAAgB,CAAC/B,KAAD,EAAQC,GAAR,EAAatC,OAAb,EAAsB;AACpC,UAAMuC,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB;AACA,QAAIJ,MAAM,GAAGG,YAAY,CAACF,KAAD,CAAZ,CAAoBD,MAAjC;AACA,QAAIiC,SAAS,GAAG/B,GAAG,GAAGD,KAAtB;AACA,QAAIA,KAAK,KAAKD,MAAM,IAAI,GAAV,GAAgB,EAAhB,GAAqB,CAA1B,CAAT,EAAuC,OAAO,KAAP;AACvC,QACE,CAACiC,SAAS,IAAI,CAAb,GACG9B,YAAY,CAACD,GAAG,GAAG,CAAP,CAAZ,CAAsBM,KADzB,GAEGL,YAAY,CAACD,GAAG,GAAG,CAAP,CAAZ,CAAsBM,KAF1B,MAEqCR,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAF3D,CADF,EAKE,OAAO,KAAP;AACF,QACE,CAACA,MAAM,IAAI,GAAV,GACG,KAAKrC,KAAL,CAAWU,oBADd,GAEG,KAAKV,KAAL,CAAWW,oBAFf,KAEwC,CAH1C,EAKE,OAAO,KAAP;;AACF,QAAI0B,MAAM,IAAI,GAAd,EAAmB;AACjB,UACE,CAACiC,SAAS,IAAI,CAAb,GACG,KAAKtE,KAAL,CAAWe,0BADd,GAEG,KAAKf,KAAL,CAAWc,yBAFf,KAE6C,CAH/C,EAKE,OAAO,KAAP;AACH,KAPD,MAOO,IAAIuB,MAAM,IAAI,GAAd,EAAmB;AACxB,UACE,CAACiC,SAAS,IAAI,CAAb,GACG,KAAKtE,KAAL,CAAWa,0BADd,GAEG,KAAKb,KAAL,CAAWY,yBAFf,KAE6C,CAH/C,EAKE,OAAO,KAAP;AACH;;AAED,WAAO,IAAP;AACD,GAlWiC,CAmWlC;;;AACA2D,EAAAA,cAAc,CAACjC,KAAD,EAAQC,GAAR,EAAatC,OAAb,EAAsB;AAClC,QAAIuE,SAAS,GAAG,IAAIT,IAAI,CAACU,KAAL,CAAWnC,KAAK,GAAG,CAAnB,CAApB;AACA,QAAIoC,SAAS,GAAIpC,KAAK,GAAG,CAAT,GAAc,CAA9B;AACA,QAAIqC,OAAO,GAAG,IAAIZ,IAAI,CAACU,KAAL,CAAWlC,GAAG,GAAG,CAAjB,CAAlB;AACA,QAAIqC,OAAO,GAAIrC,GAAG,GAAG,CAAP,GAAY,CAA1B;AACA,QAAIsC,QAAQ,GAAGF,OAAO,GAAGH,SAAzB;AACA,QAAIM,QAAQ,GAAGF,OAAO,GAAGF,SAAzB;AACA,QAAIK,OAAO,GAAG,CAAd;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,UAAMxC,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB,CATkC,CAWlC;;AACA,WAAOuC,OAAO,IAAIF,QAAX,IAAuBC,OAAO,IAAIF,QAAzC,EAAmD;AACjD,UAAII,QAAQ,GACV,KAAKT,SAAS,GAAG,CAAjB,GAAqB,CAAC,CAAD,GAAKO,OAA1B,IAAqCL,SAAS,GAAG,CAAZ,GAAgBM,OAArD,CADF;AAEA,UACExC,YAAY,CAACyC,QAAD,CAAZ,CAAuBpC,KAAvB,IAAgC,IAAhC,IACAL,YAAY,CAACyC,QAAD,CAAZ,IAA0BzC,YAAY,CAACF,KAAD,CAFxC,EAIE,OAAO,IAAP;;AACF,UAAI0C,OAAO,IAAIF,QAAf,EAAyB;AACvB,YAAIA,QAAQ,GAAG,CAAf,EAAkB;AAChB,YAAEE,OAAF;AACD,SAFD,MAEO;AACL,YAAEA,OAAF;AACD;AACF;;AACD,UAAID,OAAO,IAAIF,QAAf,EAAyB;AACvB,YAAIA,QAAQ,GAAG,CAAf,EAAkB;AAChB,YAAEE,OAAF;AACD,SAFD,MAEO;AACL,YAAEA,OAAF;AACD;AACF;AACF;;AACD,WAAO,KAAP;AACD,GAxYiC,CAyYlC;;;AACAG,EAAAA,SAAS,CAAC5C,KAAD,EAAQC,GAAR,EAAatC,OAAb,EAAsBe,WAAtB,EAAmC;AAC1C,QAAImC,OAAO,GAAGnC,WAAW,IAAI,IAAf,GAAsB,KAAKhB,KAAL,CAAWgB,WAAjC,GAA+CA,WAA7D;AACA,QAAIwD,SAAS,GAAG,IAAIT,IAAI,CAACU,KAAL,CAAWnC,KAAK,GAAG,CAAnB,CAApB;AACA,QAAIoC,SAAS,GAAIpC,KAAK,GAAG,CAAT,GAAc,CAA9B;AACA,QAAIqC,OAAO,GAAG,IAAIZ,IAAI,CAACU,KAAL,CAAWlC,GAAG,GAAG,CAAjB,CAAlB;AACA,QAAIqC,OAAO,GAAIrC,GAAG,GAAG,CAAP,GAAY,CAA1B;AACA,QAAIsC,QAAQ,GAAGF,OAAO,GAAGH,SAAzB;AACA,QAAIM,QAAQ,GAAGF,OAAO,GAAGF,SAAzB;AACA,UAAMlC,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB,CAR0C,CAU1C;;AACA,QAAIoC,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAAC,CAAlC,EAAqC;AACnC,UAAIrC,YAAY,CAACF,KAAD,CAAZ,CAAoBD,MAApB,IAA8B,GAA9B,KAAsCC,KAAK,GAAG,EAAR,IAAcA,KAAK,GAAG,EAA5D,CAAJ,EACE,OAAO,KAAP;AACF,UAAIE,YAAY,CAACF,KAAD,CAAZ,CAAoBD,MAApB,IAA8B,GAA9B,KAAsCC,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAA3D,CAAJ,EACE,OAAO,KAAP;AACH,KAhByC,CAiB1C;;;AACA,QAAIE,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,IAA/B,EAAqC;AACnC,UAAIiC,QAAQ,IAAI,CAAhB,EAAmB,OAAO,KAAP;AACpB,KApByC,CAqB1C;;;AACA,QAAID,QAAQ,IAAI,CAAZ,IAAiBC,QAAQ,IAAI,CAAjC,EAAoC;AAClC;AACA,UAAItC,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,IAA/B,EAAqC;AACnC,YAAIL,YAAY,CAACF,KAAK,GAAG,CAAT,CAAZ,CAAwBO,KAAxB,IAAiC,GAAjC,IAAwCM,OAAO,IAAIb,KAAK,GAAG,CAA/D,EACE,OAAO,KAAP;AACH;AACF,KAND,MAMO,IAAIuC,QAAQ,IAAI,CAAZ,IAAiBC,QAAQ,IAAI,CAAC,CAAlC,EAAqC;AAC1C;AACA,UAAItC,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,IAA/B,EAAqC;AACnC,YAAIL,YAAY,CAACF,KAAK,GAAG,CAAT,CAAZ,CAAwBO,KAAxB,IAAiC,GAAjC,IAAwCM,OAAO,IAAIb,KAAK,GAAG,CAA/D,EACE,OAAO,KAAP;AACH;AACF,KANM,MAMA,IAAIuC,QAAQ,IAAI,CAAC,CAAb,IAAkBC,QAAQ,IAAI,CAAlC,EAAqC;AAC1C;AACA,UAAItC,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,IAA/B,EAAqC;AACnC,YAAIL,YAAY,CAACF,KAAK,GAAG,CAAT,CAAZ,CAAwBO,KAAxB,IAAiC,GAAjC,IAAwCM,OAAO,IAAIb,KAAK,GAAG,CAA/D,EACE,OAAO,KAAP;AACH;AACF,KANM,MAMA,IAAIuC,QAAQ,IAAI,CAAC,CAAb,IAAkBC,QAAQ,IAAI,CAAC,CAAnC,EAAsC;AAC3C;AACA,UAAItC,YAAY,CAACD,GAAD,CAAZ,CAAkBM,KAAlB,IAA2B,IAA/B,EAAqC;AACnC,YAAIL,YAAY,CAACF,KAAK,GAAG,CAAT,CAAZ,CAAwBO,KAAxB,IAAiC,GAAjC,IAAwCM,OAAO,IAAIb,KAAK,GAAG,CAA/D,EACE,OAAO,KAAP;AACH;AACF;;AAED,WAAO,IAAP;AACD,GA3biC,CA4blC;;;AACA6C,EAAAA,YAAY,CAAC7C,KAAD,EAAQC,GAAR,EAAatC,OAAb,EAAsBe,WAAtB,EAAmC;AAC7C,UAAMwB,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB,CAD6C,CAE7C;AACA;;AACA,QAAI2C,KAAK,GACP5C,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,CAA0BuB,WAA1B,MAA2C,GAA3C,IACA5B,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,CAA0BuB,WAA1B,MAA2C,GAD3C,IAEA5B,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,CAA0BuB,WAA1B,MAA2C,GAF3C,IAGA5B,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,CAA0BuB,WAA1B,MAA2C,GAH3C,IAIA5B,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,CAA0BuB,WAA1B,MAA2C,GAL7C;AAMA,QAAIiB,OAAO,GACTD,KAAK,IAAI,IAAT,IAAiB,KAAKb,cAAL,CAAoBjC,KAApB,EAA2BC,GAA3B,EAAgCC,YAAhC,KAAiD,IADpE;AAEA,QAAI6C,OAAJ,EAAa,OAAOA,OAAP,CAZgC,CAa7C;;AACA,QAAIC,IAAI,GAAG9C,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,CAA0BuB,WAA1B,MAA2C,GAAtD;AACAiB,IAAAA,OAAO,GACLC,IAAI,IAAI,IAAR,IACA,KAAKJ,SAAL,CAAe5C,KAAf,EAAsBC,GAAtB,EAA2BC,YAA3B,EAAyCxB,WAAzC,KAAyD,KAF3D;AAGA,QAAIqE,OAAJ,EAAa,OAAOA,OAAP,CAlBgC,CAmB7C;;AACA,QAAIE,IAAI,GAAG/C,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,CAA0BuB,WAA1B,MAA2C,GAAtD;AACA,QAAImB,IAAI,IAAIxB,IAAI,CAACC,GAAL,CAASzB,GAAG,GAAGD,KAAf,KAAyB,CAArC,EACE+C,OAAO,GAAG,KAAKhB,gBAAL,CAAsB/B,KAAtB,EAA6BC,GAA7B,EAAkCC,YAAlC,KAAmD,KAA7D;AAEF,WAAO6C,OAAP;AACD,GAtdiC,CAudlC;;;AACAG,EAAAA,cAAc,CAAClD,KAAD,EAAQC,GAAR,EAAatC,OAAb,EAAsBe,WAAtB,EAAmC;AAC/C,UAAMwB,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB;AACA,QAAIH,KAAK,IAAIC,GAAb,EACE;AACA,aAAO,KAAP,CAJ6C,CAM/C;AACA;;AACA,QAAIF,MAAM,GAAGG,YAAY,CAACF,KAAD,CAAZ,CAAoBD,MAAjC;AACA,QACEA,MAAM,IAAIG,YAAY,CAACD,GAAD,CAAZ,CAAkBF,MAA5B,IACAG,YAAY,CAACF,KAAD,CAAZ,CAAoBmD,QAApB,CAA6BnD,KAA7B,EAAoCC,GAApC,KAA4C,KAF9C,EAIE,OAAO,KAAP,CAb6C,CAc/C;;AACA,QAAI,KAAK4C,YAAL,CAAkB7C,KAAlB,EAAyBC,GAAzB,EAA8BC,YAA9B,EAA4CxB,WAA5C,KAA4D,IAAhE,EACE,OAAO,KAAP,CAhB6C,CAkB/C;;AACA,QAAI0E,WAAW,GACblD,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,KAA8BR,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAApD,KACA0B,IAAI,CAACC,GAAL,CAASzB,GAAG,GAAGD,KAAf,KAAyB,CADzB,IAEA,KAAKQ,QAAL,CAAcT,MAAd,EAAsBG,YAAtB,CAHF;AAIA,QAAIkD,WAAJ,EAAiB,OAAO,KAAP,CAvB8B,CAyB/C;;AACA,QACElD,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,KAA8BR,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAApD,KACA0B,IAAI,CAACC,GAAL,CAASzB,GAAG,GAAGD,KAAf,KAAyB,CAF3B,EAGE;AACA,UAAIgC,SAAS,GAAG/B,GAAG,GAAGD,KAAtB;AACA,YAAMqD,YAAY,GAAG1F,OAAO,CAACwC,KAAR,EAArB;AACAkD,MAAAA,YAAY,CAACrD,KAAK,IAAIgC,SAAS,IAAI,CAAb,GAAiB,CAAjB,GAAqB,CAAC,CAA1B,CAAN,CAAZ,GAAkDqB,YAAY,CAACrD,KAAD,CAA9D;AACAqD,MAAAA,YAAY,CAACrD,KAAD,CAAZ,GAAsB,IAAI1D,YAAJ,CAAiB,IAAjB,CAAtB;AACA,UAAI,KAAKkE,QAAL,CAAcT,MAAd,EAAsBsD,YAAtB,CAAJ,EAAyC,OAAO,KAAP;AAC1C,KAnC8C,CAqC/C;;;AACA,UAAMC,aAAa,GAAG3F,OAAO,CAACwC,KAAR,EAAtB;AACAmD,IAAAA,aAAa,CAACrD,GAAD,CAAb,GAAqBqD,aAAa,CAACtD,KAAD,CAAlC;AACAsD,IAAAA,aAAa,CAACtD,KAAD,CAAb,GAAuB,IAAI1D,YAAJ,CAAiB,IAAjB,CAAvB;;AACA,QAAIgH,aAAa,CAACrD,GAAD,CAAb,CAAmBM,KAAnB,IAA4B,GAA5B,IAAmCN,GAAG,IAAI,CAA1C,IAA+CA,GAAG,IAAI,CAA1D,EAA6D;AAC3DqD,MAAAA,aAAa,CAACrD,GAAD,CAAb,GAAqB,IAAIhE,KAAJ,CAAU,GAAV,CAArB;AACD,KAFD,MAEO,IAAIqH,aAAa,CAACrD,GAAD,CAAb,CAAmBM,KAAnB,IAA4B,GAA5B,IAAmCN,GAAG,IAAI,EAA1C,IAAgDA,GAAG,IAAI,EAA3D,EAA+D;AACpEqD,MAAAA,aAAa,CAACrD,GAAD,CAAb,GAAqB,IAAIhE,KAAJ,CAAU,GAAV,CAArB;AACD;;AACD,QAAI,KAAKuE,QAAL,CAAcT,MAAd,EAAsBuD,aAAtB,KAAwC,IAA5C,EAAkD,OAAO,KAAP;AAElD,WAAO,IAAP;AACD,GAzgBiC,CA2gBlC;;;AACA9C,EAAAA,QAAQ,CAACT,MAAD,EAASpC,OAAT,EAAkB;AACxB,QAAIsF,IAAI,GAAGlD,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAAjC;AACA,QAAIwD,gBAAgB,GAAG,IAAvB;AACA,UAAMrD,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB;;AACA,SAAK,IAAIqD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAItD,YAAY,CAACsD,CAAD,CAAZ,CAAgBjD,KAAhB,IAAyB0C,IAA7B,EAAmC;AACjCM,QAAAA,gBAAgB,GAAGC,CAAnB;AACA;AACD;AACF,KATuB,CAWxB;AACA;;;AACA,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAItD,YAAY,CAACsD,CAAD,CAAZ,CAAgBzD,MAAhB,IAA0BA,MAA9B,EAAsC;AACpC,YACEG,YAAY,CAACsD,CAAD,CAAZ,CAAgBL,QAAhB,CAAyBK,CAAzB,EAA4BD,gBAA5B,KAAiD,IAAjD,IACA,KAAKV,YAAL,CAAkBW,CAAlB,EAAqBD,gBAArB,EAAuCrD,YAAvC,KAAwD,KAF1D,EAIE,OAAO,IAAP;AACH;AACF;;AACD,WAAO,KAAP;AACD,GAniBiC,CAoiBlC;;;AACAc,EAAAA,SAAS,CAACjB,MAAD,EAASpC,OAAT,EAAkB;AACzB,QAAI,KAAK6C,QAAL,CAAcT,MAAd,EAAsBpC,OAAtB,CAAJ,EAAoC,OAAO,KAAP,CADX,CAGzB;AACA;;AACA,SAAK,IAAI6F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAI7F,OAAO,CAAC6F,CAAD,CAAP,CAAWzD,MAAX,IAAqBA,MAAzB,EAAiC;AAC/B,aAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAI,KAAK4C,cAAL,CAAoBM,CAApB,EAAuBlD,CAAvB,EAA0B3C,OAA1B,CAAJ,EAAwC,OAAO,KAAP;AACzC;AACF;AACF;;AACD,WAAO,IAAP;AACD,GAljBiC,CAmjBlC;;;AACAoD,EAAAA,SAAS,CAAChB,MAAD,EAASpC,OAAT,EAAkB;AACzB,QAAI,CAAC,KAAK6C,QAAL,CAAcT,MAAd,EAAsBpC,OAAtB,CAAL,EAAqC,OAAO,KAAP,CADZ,CAEzB;AACA;;AACA,SAAK,IAAI6F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAI7F,OAAO,CAAC6F,CAAD,CAAP,CAAWzD,MAAX,IAAqBA,MAAzB,EAAiC;AAC/B,aAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAI,KAAK4C,cAAL,CAAoBM,CAApB,EAAuBlD,CAAvB,EAA0B3C,OAA1B,CAAJ,EAAwC,OAAO,KAAP;AACzC;AACF;AACF;;AACD,WAAO,IAAP;AACD,GAhkBiC,CAkkBlC;;;AACA8F,EAAAA,cAAc,CAAC9F,OAAD,EAAU;AACtB,QAAI+F,UAAU,GAAG,CAAjB;;AACA,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6BE,UAAU,IAAIC,eAAe,CAAChG,OAAO,CAAC6F,CAAD,CAAR,EAAaA,CAAb,CAA7B;;AAC7B,WAAOE,UAAP;AACD,GAvkBiC,CAwkBlC;;;AACAE,EAAAA,OAAO,CACLC,KADK,EAELC,eAFK,EAGLC,KAHK,EAILC,IAJK,EAKLrG,OALK,EAMLsG,YANK,EAOLC,UAPK,EAQLxF,WARK,EASL;AACA,UAAMwB,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB;;AACA,QAAI0D,KAAK,IAAI,CAAb,EAAgB;AACd,aAAO,KAAKJ,cAAL,CAAoBvD,YAApB,CAAP;AACD;;AAED,QAAIiE,UAAU,GAAGL,eAAe,GAAG,CAAC,IAAJ,GAAW,IAA3C,CANA,CAOA;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIxD,KAAK,GAAGiE,YAAY,CAACT,CAAD,CAAxB;AACA,UAAIY,aAAa,GACflE,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,IAA6B,IAA7B,IACAL,YAAY,CAACF,KAAD,CAAZ,CAAoBD,MAApB,KAA+B+D,eAAe,GAAG,GAAH,GAAS,GAAvD,CAFF,CAF2B,CAM3B;;AACA,UAAIM,aAAJ,EAAmB;AACjB;AACR;AACA;AACA;AACA;AACA;AACQ,aAAK,IAAI9D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAIL,GAAG,GAAGiE,UAAU,CAAC5D,CAAD,CAApB;;AACA,cACE,KAAK4C,cAAL,CAAoBlD,KAApB,EAA2BC,GAA3B,EAAgCC,YAAhC,EAA8CxB,WAA9C,KAA8D,IADhE,EAEE;AACA,kBAAM2E,YAAY,GAAG1F,OAAO,CAACwC,KAAR,EAArB,CADA,CAEA;;AACA,kBAAMkE,cAAc,GAAG,KAAK1D,SAAL,CACrB0C,YADqB,EAErBrD,KAFqB,EAGrBC,GAHqB,EAIrBvB,WAJqB,EAKrByB,KALqB,EAAvB,CAHA,CASA;;AACA,gBAAIU,OAAO,GAAG,EAAd;;AACA,gBACEwC,YAAY,CAACpD,GAAD,CAAZ,CAAkBM,KAAlB,KAA4BuD,eAAe,GAAG,GAAH,GAAS,GAApD,KACA9D,KAAK,KAAK8D,eAAe,GAAG,CAAH,GAAO,EAA3B,CADL,IAEA9D,KAAK,KAAK8D,eAAe,GAAG,EAAH,GAAQ,EAA5B,CAFL,IAGA7D,GAAG,GAAGD,KAAN,KAAgB8D,eAAe,GAAG,EAAH,GAAQ,CAAC,EAAxC,CAJF,EAKE;AACAjD,cAAAA,OAAO,GAAGZ,GAAV;AACD,aAlBD,CAoBA;;;AACA,gBAAIhD,KAAK,GAAG,KAAK2G,OAAL,CACVC,KAAK,GAAG,CADE,EAEV,CAACC,eAFS,EAGVC,KAHU,EAIVC,IAJU,EAKVK,cALU,EAMVJ,YANU,EAOVC,UAPU,EAQVrD,OARU,CAAZ;;AAUA,gBAAIiD,eAAJ,EAAqB;AACnB,kBAAI7G,KAAK,GAAGkH,UAAZ,EAAwBA,UAAU,GAAGlH,KAAb;AACxB8G,cAAAA,KAAK,GAAGtC,IAAI,CAAC6C,GAAL,CAASP,KAAT,EAAgBI,UAAhB,CAAR,CAFmB,CAEkB;;AACrC,kBAAIA,UAAU,IAAIH,IAAlB,EAAwB,OAAOG,UAAP;AACzB,aAJD,MAIO;AACL,kBAAIlH,KAAK,GAAGkH,UAAZ,EAAwBA,UAAU,GAAGlH,KAAb;AACxB+G,cAAAA,IAAI,GAAGvC,IAAI,CAAC8C,GAAL,CAASP,IAAT,EAAeG,UAAf,CAAP,CAFK,CAE8B;;AACnC,kBAAIA,UAAU,IAAIJ,KAAlB,EAAyB,OAAOI,UAAP;AAC1B;AACF;AACF;AACF;AACF;;AAED,WAAOA,UAAP;AACD,GA1pBiC,CA2pBlC;;;AACAK,EAAAA,WAAW,CAACX,KAAD,EAAQY,iBAAR,EAA2B;AACpC,QAAI,KAAK/G,KAAL,CAAW4B,KAAf,EAAsB,OAAO,gBAAP;AACtB,UAAMY,YAAY,GAAGuE,iBAAiB,CAACtE,KAAlB,EAArB;AACA,QAAIuE,UAAU,GAAG,GAAjB;AACA,QAAIC,QAAQ,GAAG,GAAf;AACA,QAAIV,YAAY,GAAG,EAAnB;AACA,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BS,MAAAA,YAAY,CAACvD,IAAb,CAAkB8C,CAAlB;AACAU,MAAAA,UAAU,CAACxD,IAAX,CAAgB8C,CAAhB;AACD;;AACDS,IAAAA,YAAY,GAAGW,OAAO,CAACX,YAAD,CAAtB;AACAC,IAAAA,UAAU,GAAGU,OAAO,CAACV,UAAD,CAApB,CAZoC,CAcpC;;AACA,QAAIW,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIxD,KAAK,GAAGiE,YAAY,CAACT,CAAD,CAAxB;AACA,UAAIsB,YAAY,GACd5E,YAAY,CAACF,KAAD,CAAZ,CAAoBO,KAApB,IAA6B,IAA7B,IAAqCL,YAAY,CAACF,KAAD,CAAZ,CAAoBD,MAApB,IAA8B,GADrE;;AAEA,UAAI+E,YAAJ,EAAkB;AAChB,aAAK,IAAIxE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAIL,GAAG,GAAGiE,UAAU,CAAC5D,CAAD,CAApB;;AACA,cAAI,KAAK4C,cAAL,CAAoBlD,KAApB,EAA2BC,GAA3B,EAAgCC,YAAhC,KAAiD,IAArD,EAA2D;AACzD2E,YAAAA,KAAK,CAACnE,IAAN,CAAWV,KAAX;AACA6E,YAAAA,KAAK,CAACnE,IAAN,CAAWT,GAAX;AACD;AACF;AACF;AACF;;AAED,QAAIkE,UAAU,GAAG,CAAC,IAAlB;AACA;AACJ;AACA;AACA;;AACI,SAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,KAAK,CAACE,MAA1B,EAAkCvB,CAAC,IAAI,CAAvC,EAA0C;AACxC,UAAIxD,KAAK,GAAG6E,KAAK,CAACrB,CAAD,CAAjB;AACA,UAAIvD,GAAG,GAAG4E,KAAK,CAACrB,CAAC,GAAG,CAAL,CAAf,CAFwC,CAGxC;;AACA,UACEqB,KAAK,CAACE,MAAN,GAAe,CAAf,IACA,KAAKrH,KAAL,CAAWS,UAAX,IAAyB,CADzB,IAEA6B,KAAK,IAAI,KAAKtC,KAAL,CAAWQ,UAFpB,IAGA+B,GAAG,IAAI,KAAKvC,KAAL,CAAWO,SAJpB,EAKE;AACA,aAAK4B,QAAL,CAAc;AACZ1B,UAAAA,UAAU,EAAE;AADA,SAAd;AAGD,OATD,MASO;AACL,cAAMkF,YAAY,GAAGoB,iBAAiB,CAACtE,KAAlB,EAArB,CADK,CAEL;;AACA,cAAMkE,cAAc,GAAG,KAAK1D,SAAL,CAAe0C,YAAf,EAA6BrD,KAA7B,EAAoCC,GAApC,EAAyCE,KAAzC,EAAvB,CAHK,CAIL;;AACA,YAAIzB,WAAW,GAAG,EAAlB;AACA,YACE2E,YAAY,CAACrD,KAAD,CAAZ,CAAoBO,KAApB,IAA6B,GAA7B,IACAP,KAAK,IAAI,CADT,IAEAA,KAAK,IAAI,EAFT,IAGAC,GAAG,GAAGD,KAAN,IAAe,EAJjB,EAMEtB,WAAW,GAAGuB,GAAd,CAZG,CAcL;;AACA,YAAI+E,UAAU,GAAG,KAAKpB,OAAL,CACfC,KAAK,GAAG,CADO,EAEf,KAFe,EAGf,CAAC,IAHc,EAIf,IAJe,EAKfQ,cALe,EAMfJ,YANe,EAOfC,UAPe,EAQfxF,WARe,CAAjB;;AAUA,YAAIsG,UAAU,IAAIb,UAAlB,EAA8B;AAC5BA,UAAAA,UAAU,GAAGa,UAAb;AACAN,UAAAA,UAAU,GAAG1E,KAAb;AACA2E,UAAAA,QAAQ,GAAG1E,GAAX;AACD;AACF;AACF;;AAED,QAAI0E,QAAQ,IAAI,GAAhB,EAAqB;AACnB;AACA;AACA,UACED,UAAU,IAAI,KAAKhH,KAAL,CAAWQ,UAAzB,IACAyG,QAAQ,IAAI,KAAKjH,KAAL,CAAWO,SAFzB,EAGE;AACA,YAAIgH,IAAI,GAAG,KAAKvH,KAAL,CAAWS,UAAX,GAAwB,CAAnC;AACA,aAAK0B,QAAL,CAAc;AACZ1B,UAAAA,UAAU,EAAE8G;AADA,SAAd;AAGD,OARD,MAQO;AACL,aAAKpF,QAAL,CAAc;AACZ1B,UAAAA,UAAU,EAAE;AADA,SAAd;AAGD;;AAED,WAAK2B,YAAL,CAAkB,GAAlB,EAAuBI,YAAvB,EAAqCwE,UAArC,EAAiDC,QAAjD;AACD;AACF,GAjwBiC,CAmwBlC;;;AACAO,EAAAA,WAAW,CAAC1B,CAAD,EAAI;AACb,QAAItD,YAAY,GAAG,KAAKxC,KAAL,CAAWC,OAAX,CAAmBwC,KAAnB,EAAnB;;AAEA,QAAI,KAAKzC,KAAL,CAAWqB,WAAX,GAAyB,CAAzB,IAA8B,KAAKrB,KAAL,CAAWM,QAA7C,EAAuD;AACrD,aAAO,2BAAP;AACD;;AAED,QAAI,KAAKN,KAAL,CAAW4B,KAAf,EAAsB,OAAO,WAAP,CAPT,CASb;;AACA,QAAI,KAAK5B,KAAL,CAAWG,MAAX,IAAqB,CAAC,CAAtB,IAA2B,KAAKH,KAAL,CAAWiB,WAAX,IAA0B,CAAzD,EAA4D;AAC1D;AACA;AACA,UAAIuB,YAAY,CAACsD,CAAD,CAAZ,CAAgBzD,MAAhB,IAA0B,KAAKrC,KAAL,CAAWI,IAAzC,EAA+C,OAAO,CAAC,CAAR,CAHW,CAK1D;;AACA,UAAIoC,YAAY,CAACsD,CAAD,CAAZ,CAAgBzD,MAAhB,IAA0B,IAA9B,EAAoC;AAClC,aAAKF,QAAL,CAAc;AACZJ,UAAAA,WAAW,EAAE,KADD;AAEZE,UAAAA,YAAY,EAAE,KAFF;AAGZJ,UAAAA,SAAS,EAAE,KAHC;AAIZC,UAAAA,YAAY,EAAE,KAJF;AAKZE,UAAAA,eAAe,EAAE;AALL,SAAd;AAQAQ,QAAAA,YAAY,GAAGiF,qBAAqB,CAACjF,YAAD,EAAe,GAAf,CAArB,CAAyCC,KAAzC,EAAf;AACAD,QAAAA,YAAY,CAACsD,CAAD,CAAZ,CAAgB3B,SAAhB,GAA4B,CAA5B,CAVkC,CAUH;AAE/B;;AACA,aAAK,IAAIvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAI,KAAK4C,cAAL,CAAoBM,CAApB,EAAuBlD,CAAvB,EAA0BJ,YAA1B,CAAJ,EACEA,YAAY,CAACI,CAAD,CAAZ,CAAgB8E,QAAhB,GAA2B,CAA3B;AACH;;AAED,aAAKvF,QAAL,CAAc;AACZhC,UAAAA,MAAM,EAAE2F,CADI;AACD;AACX7F,UAAAA,OAAO,EAAEuC;AAFG,SAAd;AAID;AACF,KAvCY,CAyCb;;;AACA,QAAI,KAAKxC,KAAL,CAAWG,MAAX,GAAoB,CAAC,CAAzB,EAA4B;AAC1B,UAAIwH,WAAW,GAAGnF,YAAY,CAACsD,CAAD,CAAZ,CAAgBzD,MAAhB,IAA0B,KAAKrC,KAAL,CAAWI,IAAvD;AACA;AACN;AACA;;AACM,UAAIuH,WAAW,IAAI,IAAf,IAAuB,KAAK3H,KAAL,CAAWG,MAAX,IAAqB2F,CAAhD,EAAmD;AACjDtD,QAAAA,YAAY,CAACsD,CAAD,CAAZ,CAAgB3B,SAAhB,GAA4B,CAA5B;AACA3B,QAAAA,YAAY,CAAC,KAAKxC,KAAL,CAAWG,MAAZ,CAAZ,CAAgCgE,SAAhC,GAA4C,CAA5C;AACA3B,QAAAA,YAAY,GAAGG,wBAAwB,CAACH,YAAD,CAAxB,CAAuCC,KAAvC,EAAf;;AACA,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAI,KAAK4C,cAAL,CAAoBM,CAApB,EAAuBlD,CAAvB,EAA0BJ,YAA1B,CAAJ,EACEA,YAAY,CAACI,CAAD,CAAZ,CAAgB8E,QAAhB,GAA2B,CAA3B;AACH;;AACD,aAAKvF,QAAL,CAAc;AACZhC,UAAAA,MAAM,EAAE2F,CADI;AACD;AACX7F,UAAAA,OAAO,EAAEuC;AAFG,SAAd;AAID,OAZD,MAYO;AACL;AACA,YAAI,CAAC,KAAKgD,cAAL,CAAoB,KAAKxF,KAAL,CAAWG,MAA/B,EAAuC2F,CAAvC,EAA0CtD,YAA1C,CAAL,EAA8D;AAC5D;AACAA,UAAAA,YAAY,CAAC,KAAKxC,KAAL,CAAWG,MAAZ,CAAZ,CAAgCgE,SAAhC,GAA4C,CAA5C;AACA3B,UAAAA,YAAY,GAAGG,wBAAwB,CAACH,YAAD,CAAxB,CAAuCC,KAAvC,EAAf,CAH4D,CAI5D;AACA;;AACA,cACEqD,CAAC,IAAI,KAAK9F,KAAL,CAAWG,MAAhB,IACA,KAAK2C,QAAL,CAAc,GAAd,EAAmBN,YAAnB,KAAoC,IAFtC,EAGE;AACA,iBAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,kBAAIJ,YAAY,CAACI,CAAD,CAAZ,CAAgBC,KAAhB,IAAyB,GAA7B,EAAkC;AAChCL,gBAAAA,YAAY,CAACI,CAAD,CAAZ,CAAgBE,QAAhB,GAA2B,CAA3B;AACA;AACD;AACF;;AACD,iBAAKX,QAAL,CAAc;AACZJ,cAAAA,WAAW,EAAE;AADD,aAAd;AAGD;;AACD,eAAKI,QAAL,CAAc;AACZhC,YAAAA,MAAM,EAAE,CAAC,CADG;AAEZF,YAAAA,OAAO,EAAEuC;AAFG,WAAd;AAIA,iBAAO,cAAP;AACD;;AAED,aAAKJ,YAAL,CAAkB,GAAlB,EAAuBI,YAAvB,EAAqC,KAAKxC,KAAL,CAAWG,MAAhD,EAAwD2F,CAAxD;AAEA8B,QAAAA,UAAU,CAAC,MAAM;AACf,eAAKzF,QAAL,CAAc;AACZN,YAAAA,SAAS,EAAE,KADC;AAEZC,YAAAA,YAAY,EAAE;AAFF,WAAd;AAID,SALS,EAKP,GALO,CAAV,CA/BK,CAsCL;;AACA,YAAI+F,YAAY,GAAG,CAAnB;AACAD,QAAAA,UAAU,CAAC,MAAM;AACf,eAAKd,WAAL,CAAiBe,YAAjB,EAA+B,KAAK7H,KAAL,CAAWC,OAA1C;AACD,SAFS,EAEP,GAFO,CAAV;AAGD;AACF;AACF,GA52BiC,CA82BlC;;;AACA6H,EAAAA,MAAM,GAAG;AACP,UAAMC,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BiC,MAAAA,QAAQ,CAAC/E,IAAT,eAAc,QAAC,KAAD;AAAe,QAAA,KAAK,EAAE8C;AAAtB,SAAYA,CAAZ;AAAA;AAAA;AAAA;AAAA,cAAd;AACD;;AACD,UAAMkC,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAImC,MAAJ;;AACA,cAAQnC,CAAR;AACE,aAAK,CAAL;AACEmC,UAAAA,MAAM,GAAG,GAAT;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,MAAM,GAAG,GAAT;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,MAAM,GAAG,GAAT;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,MAAM,GAAG,GAAT;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,MAAM,GAAG,GAAT;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,MAAM,GAAG,GAAT;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,MAAM,GAAG,GAAT;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,MAAM,GAAG,GAAT;AACA;AAxBJ;;AA0BAD,MAAAA,QAAQ,CAAChF,IAAT,eAAc,QAAC,KAAD;AAAoB,QAAA,KAAK,EAAEiF;AAA3B,SAAYA,MAAZ;AAAA;AAAA;AAAA;AAAA,cAAd;AACD;;AAED,UAAMC,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAMqC,UAAU,GAAG,EAAnB;;AACA,WAAK,IAAIvF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAIwF,aAAa,GAAG,IAApB;;AACA,YAAItC,CAAC,IAAI,CAAL,IAAUlD,CAAC,IAAI,CAAnB,EAAsB;AACpBwF,UAAAA,aAAa,GAAG,mBAAhB;AACD,SAFD,MAEO,IAAItC,CAAC,IAAI,CAAL,IAAUlD,CAAC,IAAI,CAAnB,EAAsB;AAC3BwF,UAAAA,aAAa,GAAG,oBAAhB;AACD,SAFM,MAEA,IAAItC,CAAC,IAAI,CAAL,IAAUlD,CAAC,IAAI,CAAnB,EAAsB;AAC3BwF,UAAAA,aAAa,GAAG,sBAAhB;AACD,SAFM,MAEA,IAAItC,CAAC,IAAI,CAAL,IAAUlD,CAAC,IAAI,CAAnB,EAAsB;AAC3BwF,UAAAA,aAAa,GAAG,uBAAhB;AACD,SAFM,MAEA;AACLA,UAAAA,aAAa,GAAG,GAAhB;AACD;;AAED,cAAM5F,YAAY,GAAG,KAAKxC,KAAL,CAAWC,OAAX,CAAmBwC,KAAnB,EAArB;AACA,YAAI4F,YAAY,GAAGC,gBAAgB,CAACxC,CAAD,EAAIlD,CAAJ,EAAOJ,YAAP,CAAnC;AACA,YAAI+F,aAAa,GAAG,SAApB;AACA,YAAI/F,YAAY,CAACsD,CAAC,GAAG,CAAJ,GAAQlD,CAAT,CAAZ,CAAwBP,MAAxB,IAAkC,GAAtC,EAA2CkG,aAAa,GAAG,SAAhB;AAC3C,YAAI,KAAKvI,KAAL,CAAWiB,WAAX,IAA0B,CAA1B,IAA+B,CAAC,KAAKjB,KAAL,CAAW4B,KAA/C,EACE2G,aAAa,GAAG,aAAhB;AACF,YAAI,KAAKvI,KAAL,CAAW4B,KAAf,EAAsB2G,aAAa,GAAG,SAAhB;AACtB,YAAI,KAAKvI,KAAL,CAAWqB,WAAX,GAAyB,CAAzB,IAA8B,KAAKrB,KAAL,CAAWM,QAA7C,EACEiI,aAAa,GAAG,aAAhB;AAEFJ,QAAAA,UAAU,CAACnF,IAAX,eACE,QAAC,MAAD;AAEE,UAAA,KAAK,EAAER,YAAY,CAACsD,CAAC,GAAG,CAAJ,GAAQlD,CAAT,CAFrB;AAGE,UAAA,KAAK,EAAEyF,YAHT;AAIE,UAAA,MAAM,EAAED,aAJV;AAKE,UAAA,MAAM,EAAEG,aALV;AAME,UAAA,OAAO,EAAE,MAAM,KAAKf,WAAL,CAAiB1B,CAAC,GAAG,CAAJ,GAAQlD,CAAzB;AANjB,WACOkD,CAAC,GAAG,CAAJ,GAAQlD,CADf;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD;;AACDsF,MAAAA,KAAK,CAAClF,IAAN,eAAW;AAAA,kBAAcmF;AAAd,SAAUrC,CAAV;AAAA;AAAA;AAAA;AAAA,cAAX;AACD;;AAED,QAAI0C,WAAW,GAAG,KAAKnF,SAAL,CAAe,GAAf,EAAoB,KAAKrD,KAAL,CAAWC,OAA/B,CAAlB;AACA,QAAIwI,WAAW,GAAG,KAAKpF,SAAL,CAAe,GAAf,EAAoB,KAAKrD,KAAL,CAAWC,OAA/B,CAAlB;AACA,QAAIyI,WAAW,GACb,EAAE,KAAK1I,KAAL,CAAWqB,WAAX,GAAyB,CAAzB,IAA8B,KAAKrB,KAAL,CAAWM,QAA3C,KACA,CAAC,KAAKN,KAAL,CAAWgC,eAFd;AAGA,QAAI2G,KAAK,GACN,KAAKrF,SAAL,CAAe,GAAf,EAAoB,KAAKtD,KAAL,CAAWC,OAA/B,KAA2C,KAAKD,KAAL,CAAWI,IAAX,IAAmB,GAA/D,IACC,KAAKkD,SAAL,CAAe,GAAf,EAAoB,KAAKtD,KAAL,CAAWC,OAA/B,KAA2C,KAAKD,KAAL,CAAWI,IAAX,IAAmB,GAFjE;AAIA,wBACE;AAAA,iBACG,KAAKJ,KAAL,CAAW6B,SAAX,IAAwB,CAAC,KAAK7B,KAAL,CAAW8B,YAApC,iBACC;AAAA,gCACE;AACE,UAAA,GAAG,EAAC,WADN;AAEE,UAAA,GAAG,EAAE3C,UAFP;AAGE,UAAA,QAAQ,MAHV;AAIE,UAAA,QAAQ,MAJV;AAKE,UAAA,MAAM;AALR;AAAA;AAAA;AAAA;AAAA,gBADF,EAOK,GAPL;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAYG,KAAKa,KAAL,CAAW8B,YAAX,IAA2B4G,WAA3B,iBACC;AAAA,gCACE;AACE,UAAA,GAAG,EAAC,WADN;AAEE,UAAA,GAAG,EAAE3J,aAFP;AAGE,UAAA,QAAQ,MAHV;AAIE,UAAA,QAAQ,MAJV;AAKE,UAAA,MAAM;AALR;AAAA;AAAA;AAAA;AAAA,gBADF,EAOK,GAPL;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ,EAuBGyJ,WAAW,IAAIE,WAAf,iBACC;AAAA,gCACE;AACE,UAAA,GAAG,EAAC,WADN;AAEE,UAAA,GAAG,EAAE7J,kBAFP;AAGE,UAAA,QAAQ,MAHV;AAIE,UAAA,QAAQ,MAJV;AAKE,UAAA,MAAM;AALR;AAAA;AAAA;AAAA;AAAA,gBADF,EAOK,GAPL;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBJ,EAkCG4J,WAAW,IAAIC,WAAf,iBACC;AAAA,gCACE;AACE,UAAA,GAAG,EAAC,WADN;AAEE,UAAA,GAAG,EAAE5J,kBAFP;AAGE,UAAA,QAAQ,MAHV;AAIE,UAAA,QAAQ,MAJV;AAKE,UAAA,MAAM;AALR;AAAA;AAAA;AAAA;AAAA,gBADF,EAOK,GAPL;AAAA;AAAA;AAAA;AAAA;AAAA,cAnCJ,EA6CG6J,KAAK,IAAID,WAAT,iBACC;AAAA,gCACE;AACE,UAAA,GAAG,EAAC,WADN;AAEE,UAAA,GAAG,EAAE1J,eAFP;AAGE,UAAA,QAAQ,MAHV;AAIE,UAAA,QAAQ,MAJV;AAKE,UAAA,MAAM;AALR;AAAA;AAAA;AAAA;AAAA,gBADF,EAOK,GAPL;AAAA;AAAA;AAAA;AAAA;AAAA,cA9CJ,EAwDG,KAAKgB,KAAL,CAAW+B,WAAX,IACC,EAAE,KAAK/B,KAAL,CAAWqB,WAAX,GAAyB,CAAzB,IAA8B,KAAKrB,KAAL,CAAWM,QAA3C,CADD,IAEC,CAAC,KAAKN,KAAL,CAAWiC,YAFb,iBAGG;AAAA,mBACG,GADH,eAEE;AACE,UAAA,GAAG,EAAC,WADN;AAEE,UAAA,GAAG,EAAC,kCAFN;AAGE,UAAA,QAAQ,MAHV;AAIE,UAAA,QAAQ,MAJV;AAKE,UAAA,MAAM;AALR;AAAA;AAAA;AAAA;AAAA,gBAFF,EAQK,GARL;AAAA;AAAA;AAAA;AAAA;AAAA,cA3DN,eAuEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,0BAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,sCACE;AAAG,gBAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAG,gBAAA,SAAS,EAAC,aAAb;AAAA,kFAEE;AAAG,kBAAA,IAAI,EAAC,oBAAR;AAA6B,kBAAA,MAAM,EAAC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAaE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,eAAf;AAAA,qCACE;AAAG,gBAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAKE;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,sCACE;AAAK,gBAAA,SAAS,EAAC,YAAf;AAAA,wCACE;AAAG,kBAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEG,KAAKjC,KAAL,CAAWkB,yBAFd;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAKE;AAAK,gBAAA,SAAS,EAAC,+BAAf;AAAA,wCACE;AAAG,kBAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEG,KAAKlB,KAAL,CAAWmB,yBAFd;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAeE;AAAK,cAAA,SAAS,EAAC,SAAf;AAAA,yBACG,KAAKnB,KAAL,CAAWI,IAAX,IAAmB,GAAnB,gBACC;AAAK,gBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,sBADD,gBAGC;AAAK,gBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,sBAJJ,EAMG,KAAKJ,KAAL,CAAWI,IAAX,IAAmB,GAAnB,gBACC;AAAK,gBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,sBADD,gBAGC;AAAK,gBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,sBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAfF,eA4BE;AAAK,cAAA,SAAS,EAAC,gBAAf;AAAA,sCACE;AACE,gBAAA,SAAS,EAAC,sBADZ;AAEE,gBAAA,OAAO,EAAE,MAAM,KAAKwI,WAAL,CAAiB,UAAjB,CAFjB;AAAA,uCAIE;AAAG,kBAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,sBADF,eAOE;AACE,gBAAA,SAAS,EAAC,sBADZ;AAEE,gBAAA,OAAO,EAAE,MAAM,KAAKA,WAAL,CAAiB,MAAjB,CAFjB;AAAA,uCAIE;AAAG,kBAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,sBAPF,eAaE;AAAQ,gBAAA,SAAS,EAAC,cAAlB;AAAiC,gBAAA,OAAO,EAAE,MAAM,KAAK1G,KAAL,EAAhD;AAAA,uCACE;AAAG,kBAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAbF,eAgBE;AACE,gBAAA,SAAS,EAAC,sBADZ;AAEE,gBAAA,OAAO,EAAE,MAAM,KAAK0G,WAAL,CAAiB,MAAjB,CAFjB;AAAA,uCAIE;AAAG,kBAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,sBAhBF,eAsBE;AACE,gBAAA,SAAS,EAAC,sBADZ;AAEE,gBAAA,OAAO,EAAE,MAAM,KAAKA,WAAL,CAAiB,UAAjB,CAFjB;AAAA,uCAIE;AAAG,kBAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,sBAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,oBA5BF,eA0DE;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,sCACE;AAAG,gBAAA,SAAS,EAAC,YAAb;AAAA,0BACG,KAAK9F,QAAL,CAAc,GAAd,EAAmB,KAAK9C,KAAL,CAAWC,OAA9B,KACD,CAAC,KAAKoD,SAAL,CAAe,GAAf,EAAoB,KAAKrD,KAAL,CAAWC,OAA/B,CAAD,IAA4C,IAD3C,GAEG,mBAFH,GAGG;AAJN;AAAA;AAAA;AAAA;AAAA,sBADF,eAOE;AAAG,gBAAA,SAAS,EAAC,YAAb;AAAA,0BACG,KAAK6C,QAAL,CAAc,GAAd,EAAmB,KAAK9C,KAAL,CAAWC,OAA9B,KACD,CAAC,KAAKoD,SAAL,CAAe,GAAf,EAAoB,KAAKrD,KAAL,CAAWC,OAA/B,CAAD,IAA4C,IAD3C,GAEG,2BAFH,GAGG;AAJN;AAAA;AAAA;AAAA;AAAA,sBAPF,eAaE;AAAG,gBAAA,SAAS,EAAC,YAAb;AAAA,0BACG,KAAKoD,SAAL,CAAe,GAAf,EAAoB,KAAKrD,KAAL,CAAWC,OAA/B,KAA2C,IAA3C,GACG,wBADH,GAEG;AAHN;AAAA;AAAA;AAAA;AAAA,sBAbF,eAkBE;AAAG,gBAAA,SAAS,EAAC,YAAb;AAAA,0BACG,KAAKoD,SAAL,CAAe,GAAf,EAAoB,KAAKrD,KAAL,CAAWC,OAA/B,KAA2C,IAA3C,GACG,uBADH,GAEG;AAHN;AAAA;AAAA;AAAA;AAAA,sBAlBF,eAuBE;AAAG,gBAAA,SAAS,EAAC,YAAb;AAAA,0BACG,CAAC,KAAKqD,SAAL,CAAe,GAAf,EAAoB,KAAKtD,KAAL,CAAWC,OAA/B,KACA,KAAKD,KAAL,CAAWI,IAAX,IAAmB,GADpB,KAC4B,IAD5B,GAEG,kCAFH,GAGG;AAJN;AAAA;AAAA;AAAA;AAAA,sBAvBF,eA6BE;AAAG,gBAAA,SAAS,EAAC,YAAb;AAAA,0BACG,CAAC,KAAKkD,SAAL,CAAe,GAAf,EAAoB,KAAKtD,KAAL,CAAWC,OAA/B,KACA,KAAKD,KAAL,CAAWI,IAAX,IAAmB,GADpB,KAC4B,IAD5B,GAEG,mCAFH,GAGG;AAJN;AAAA;AAAA;AAAA;AAAA,sBA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,oBA1DF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eA+GE;AAAK,UAAA,SAAS,EAAC,2BAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,4BAA6B2H,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA,4BAAyBG,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,4BAA6BF,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA/GF;AAAA;AAAA;AAAA;AAAA;AAAA,cAvEF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA+LD,GAroCiC,CAuoClC;;;AACAY,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,QACE,KAAK7I,KAAL,CAAWqB,WAAX,GAAyB,CAAzB,IAA8B,KAAKrB,KAAL,CAAWM,QAAzC,IACA,KAAKN,KAAL,CAAWI,IAAX,IAAmB,GADnB,IAEA,CAAC,KAAKJ,KAAL,CAAW4B,KAHd,EAIE;AACA,aAAO,6BAAP;AACD;;AAED,QAAIY,YAAY,GAAG,IAAnB;AACA,QAAIoB,qBAAqB,GAAG,IAA5B;AACA,QAAIC,qBAAqB,GAAG,IAA5B;;AAEA,QAAIgF,SAAS,IAAI,UAAjB,EAA6B;AAC3BrG,MAAAA,YAAY,GAAG,KAAKxC,KAAL,CAAWoB,OAAX,CAAmB,CAAnB,EAAsBqB,KAAtB,EAAf;AACAmB,MAAAA,qBAAqB,GAAG,EAAxB;AACAC,MAAAA,qBAAqB,GAAG,EAAxB;AACD,KAJD,MAIO,IACLgF,SAAS,IAAI,UAAb,IACA,KAAK7I,KAAL,CAAWqB,WAAX,GAAyB,KAAKrB,KAAL,CAAWM,QAAX,GAAsB,CAF1C,EAGL;AACAkC,MAAAA,YAAY,GAAG,KAAKxC,KAAL,CAAWoB,OAAX,CAAmB,KAAKpB,KAAL,CAAWM,QAA9B,EAAwCmC,KAAxC,EAAf;AACAmB,MAAAA,qBAAqB,GACnB,KAAK5D,KAAL,CAAW0B,wBAAX,CAAoC,KAAK1B,KAAL,CAAWM,QAA/C,CADF;AAEAuD,MAAAA,qBAAqB,GACnB,KAAK7D,KAAL,CAAW2B,wBAAX,CAAoC,KAAK3B,KAAL,CAAWM,QAA/C,CADF;AAED,KATM,MASA,IAAIuI,SAAS,IAAI,MAAb,IAAuB,KAAK7I,KAAL,CAAWqB,WAAX,GAAyB,CAAzB,IAA8B,CAAzD,EAA4D;AACjEmB,MAAAA,YAAY,GAAG,KAAKxC,KAAL,CAAWoB,OAAX,CAAmB,KAAKpB,KAAL,CAAWqB,WAAX,GAAyB,CAA5C,EAA+CoB,KAA/C,EAAf;AACAmB,MAAAA,qBAAqB,GACnB,KAAK5D,KAAL,CAAW0B,wBAAX,CAAoC,KAAK1B,KAAL,CAAWqB,WAAX,GAAyB,CAA7D,CADF;AAEAwC,MAAAA,qBAAqB,GACnB,KAAK7D,KAAL,CAAW2B,wBAAX,CAAoC,KAAK3B,KAAL,CAAWqB,WAAX,GAAyB,CAA7D,CADF;AAED,KANM,MAMA,IACLwH,SAAS,IAAI,MAAb,IACA,KAAK7I,KAAL,CAAWqB,WAAX,IAA0B,KAAKrB,KAAL,CAAWM,QAFhC,EAGL;AACAkC,MAAAA,YAAY,GAAG,KAAKxC,KAAL,CAAWoB,OAAX,CAAmB,KAAKpB,KAAL,CAAWqB,WAA9B,EAA2CoB,KAA3C,EAAf;AACAmB,MAAAA,qBAAqB,GACnB,KAAK5D,KAAL,CAAW0B,wBAAX,CAAoC,KAAK1B,KAAL,CAAWqB,WAA/C,CADF;AAEAwC,MAAAA,qBAAqB,GACnB,KAAK7D,KAAL,CAAW2B,wBAAX,CAAoC,KAAK3B,KAAL,CAAWqB,WAA/C,CADF;AAED,KATM,MASA;AACL,aAAO,iBAAP;AACD;;AAEDmB,IAAAA,YAAY,GAAGG,wBAAwB,CAACH,YAAD,CAAxB,CAAuCC,KAAvC,EAAf;AACAD,IAAAA,YAAY,GAAGE,eAAe,CAACF,YAAD,CAAf,CAA8BC,KAA9B,EAAf;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIJ,YAAY,CAACI,CAAD,CAAZ,CAAgBC,KAAhB,KAA0B,KAAK7C,KAAL,CAAWI,IAAX,IAAmB,GAAnB,GAAyB,GAAzB,GAA+B,GAAzD,CAAJ,EAAmE;AACjEoC,QAAAA,YAAY,CAACI,CAAD,CAAZ,CAAgBE,QAAhB,GAA2B,CAA3B;AACAN,QAAAA,YAAY,CAACI,CAAD,CAAZ,CAAgBkG,OAAhB,GAA0B,CAA1B;AACA;AACD;AACF;;AAED,QAAIH,KAAK,GACP,KAAKrF,SAAL,CAAe,KAAKtD,KAAL,CAAWK,SAA1B,EAAqCmC,YAArC,KACA,KAAKxC,KAAL,CAAWI,IAAX,IAAmB,KAAKJ,KAAL,CAAWK,SAFhC;AAGAmC,IAAAA,YAAY,GAAGY,cAAc,CAC3B,KAAKpD,KAAL,CAAWK,SADgB,EAE3BmC,YAF2B,EAG3B,KAAKa,SAAL,CAAe,KAAKrD,KAAL,CAAWK,SAA1B,EAAqCmC,YAArC,CAH2B,EAI3BmG,KAJ2B,CAAd,CAKblG,KALa,EAAf;AAOA,QAAIsG,KAAK,GAAG,IAAZ;AACA,QAAIF,SAAS,IAAI,MAAjB,EAAyBE,KAAK,GAAG,KAAK/I,KAAL,CAAWqB,WAAX,GAAyB,CAAjC,CAAzB,KACK,IAAIwH,SAAS,IAAI,MAAjB,EAAyBE,KAAK,GAAG,KAAK/I,KAAL,CAAWqB,WAAnB,CAAzB,KACA,IAAIwH,SAAS,IAAI,UAAjB,EAA6BE,KAAK,GAAG,KAAK/I,KAAL,CAAWM,QAAnB;;AAElC,QAAIyI,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,IAA3B,EAAiC;AAC/B,UAAI,KAAK/I,KAAL,CAAWsB,UAAX,CAAsByH,KAAtB,KAAgC,IAApC,EAA0C;AACxCvG,QAAAA,YAAY,CAAC,KAAKxC,KAAL,CAAWsB,UAAX,CAAsByH,KAAtB,CAAD,CAAZ,CAA2C5E,SAA3C,GAAuD,CAAvD;AACA3B,QAAAA,YAAY,CAAC,KAAKxC,KAAL,CAAWuB,UAAX,CAAsBwH,KAAtB,CAAD,CAAZ,CAA2C5E,SAA3C,GAAuD,CAAvD;AACD;;AACD,UAAI,KAAKnE,KAAL,CAAWwB,UAAX,CAAsBuH,KAAtB,KAAgC,IAApC,EAA0C;AACxCvG,QAAAA,YAAY,CAAC,KAAKxC,KAAL,CAAWwB,UAAX,CAAsBuH,KAAtB,CAAD,CAAZ,CAA2C5E,SAA3C,GAAuD,CAAvD;AACA3B,QAAAA,YAAY,CAAC,KAAKxC,KAAL,CAAWyB,UAAX,CAAsBsH,KAAtB,CAAD,CAAZ,CAA2C5E,SAA3C,GAAuD,CAAvD;AACD;AACF;;AAED,QAAI6E,eAAe,GACjBH,SAAS,IAAI,MAAb,GACI,KAAK7I,KAAL,CAAWqB,WAAX,GAAyB,CAD7B,GAEI,KAAKrB,KAAL,CAAWqB,WAAX,GAAyB,CAH/B;AAIA,QAAIwH,SAAS,IAAI,UAAjB,EAA6BG,eAAe,GAAG,CAAlB;AAC7B,QAAIH,SAAS,KAAK,UAAlB,EAA8BG,eAAe,GAAG,KAAKhJ,KAAL,CAAWM,QAAX,GAAsB,CAAxC;AAE9B,SAAK6B,QAAL,CAAc;AACZH,MAAAA,eAAe,EAAE,IADL;AAEZC,MAAAA,YAAY,EAAE,IAFF;AAGZhC,MAAAA,OAAO,EAAEuC,YAHG;AAIZnB,MAAAA,WAAW,EAAE2H,eAJD;AAKZ5I,MAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWI,IAAX,IAAmB,GAAnB,GAAyB,GAAzB,GAA+B,GALzB;AAMZc,MAAAA,yBAAyB,EACvB0C,qBAAqB,IAAI,IAAzB,GACIA,qBADJ,GAEI,KAAK5D,KAAL,CAAWkB,yBATL;AAUZC,MAAAA,yBAAyB,EACvB0C,qBAAqB,IAAI,IAAzB,GACIA,qBADJ,GAEI,KAAK7D,KAAL,CAAWmB;AAbL,KAAd;;AAgBA,QAAI0H,SAAS,IAAI,UAAb,IAA2BA,SAAS,IAAI,UAA5C,EAAwD;AACtD,WAAK1G,QAAL,CAAc;AACZ/B,QAAAA,IAAI,EAAEyI,SAAS,IAAI,UAAb,GAA0B,GAA1B,GAAgC,KAAK7I,KAAL,CAAWK;AADrC,OAAd;AAGD;AACF;;AArvCiC;;AAwvCpC,MAAM4I,IAAN,SAAmB5K,KAAK,CAACyB,SAAzB,CAAmC;AACjCgI,EAAAA,MAAM,GAAG;AACP,wBAAO,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAHgC,C,CAMnC;AACA;;;AACA,SAAS5H,eAAT,GAA2B;AACzB,QAAMD,OAAO,GAAGiJ,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,IAAf,CAAhB,CADyB,CAEzB;;AACA,OAAK,IAAIrD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B7F,IAAAA,OAAO,CAAC6F,CAAD,CAAP,GAAa,IAAIrH,IAAJ,CAAS,GAAT,CAAb;AACD,GALwB,CAMzB;;;AACA,OAAK,IAAIqH,CAAC,GAAG,IAAI,CAAjB,EAAoBA,CAAC,GAAG,IAAI,CAAJ,GAAQ,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACtC7F,IAAAA,OAAO,CAAC6F,CAAD,CAAP,GAAa,IAAIrH,IAAJ,CAAS,GAAT,CAAb;AACD,GATwB,CAUzB;;;AACAwB,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAIzB,MAAJ,CAAW,GAAX,CAAb;AACAyB,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAIzB,MAAJ,CAAW,GAAX,CAAb,CAZyB,CAazB;;AACAyB,EAAAA,OAAO,CAAC,KAAK,CAAN,CAAP,GAAkB,IAAIzB,MAAJ,CAAW,GAAX,CAAlB;AACAyB,EAAAA,OAAO,CAAC,KAAK,CAAN,CAAP,GAAkB,IAAIzB,MAAJ,CAAW,GAAX,CAAlB,CAfyB,CAgBzB;;AACAyB,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAItB,MAAJ,CAAW,GAAX,CAAb;AACAsB,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAItB,MAAJ,CAAW,GAAX,CAAb,CAlByB,CAmBzB;;AACAsB,EAAAA,OAAO,CAAC,KAAK,CAAN,CAAP,GAAkB,IAAItB,MAAJ,CAAW,GAAX,CAAlB;AACAsB,EAAAA,OAAO,CAAC,KAAK,CAAN,CAAP,GAAkB,IAAItB,MAAJ,CAAW,GAAX,CAAlB,CArByB,CAsBzB;;AACAsB,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAIvB,IAAJ,CAAS,GAAT,CAAb;AACAuB,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAIvB,IAAJ,CAAS,GAAT,CAAb,CAxByB,CAyBzB;;AACAuB,EAAAA,OAAO,CAAC,KAAK,CAAN,CAAP,GAAkB,IAAIvB,IAAJ,CAAS,GAAT,CAAlB;AACAuB,EAAAA,OAAO,CAAC,KAAK,CAAN,CAAP,GAAkB,IAAIvB,IAAJ,CAAS,GAAT,CAAlB,CA3ByB,CA4BzB;;AACAuB,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAI1B,KAAJ,CAAU,GAAV,CAAb;AACA0B,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAI3B,IAAJ,CAAS,GAAT,CAAb,CA9ByB,CA+BzB;;AACA2B,EAAAA,OAAO,CAAC,KAAK,CAAN,CAAP,GAAkB,IAAI1B,KAAJ,CAAU,GAAV,CAAlB;AACA0B,EAAAA,OAAO,CAAC,KAAK,CAAN,CAAP,GAAkB,IAAI3B,IAAJ,CAAS,GAAT,CAAlB;;AAEA,OAAK,IAAIwH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAI7F,OAAO,CAAC6F,CAAD,CAAP,IAAc,IAAlB,EAAwB7F,OAAO,CAAC6F,CAAD,CAAP,GAAa,IAAIlH,YAAJ,CAAiB,IAAjB,CAAb;AACzB;;AAED,SAAOqB,OAAP;AACD,C,CAED;AACA;;;AACA,SAASiH,OAAT,CAAiBkC,eAAjB,EAAkC;AAChC,QAAMC,KAAK,GAAGD,eAAe,CAAC3G,KAAhB,EAAd;;AACA,OAAK,IAAIqD,CAAC,GAAGuD,KAAK,CAAChC,MAAN,GAAe,CAA5B,EAA+BvB,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,QAAIlD,CAAC,GAAGmB,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACuF,MAAL,MAAiBxD,CAAC,GAAG,CAArB,CAAX,CAAR,CADyC,CACI;;AAC7C,KAACuD,KAAK,CAACvD,CAAD,CAAN,EAAWuD,KAAK,CAACzG,CAAD,CAAhB,IAAuB,CAACyG,KAAK,CAACzG,CAAD,CAAN,EAAWyG,KAAK,CAACvD,CAAD,CAAhB,CAAvB,CAFyC,CAEI;AAC9C;;AACD,SAAOuD,KAAP;AACD,C,CACD;;;AACA,SAASE,YAAT,CAAsBF,KAAtB,EAA6B;AAC3B,SAAOA,KAAK,CAAC5G,KAAN,GAAc+G,OAAd,EAAP;AACD,C,CACD;;;AACA,SAASvD,eAAT,CAAyBwD,KAAzB,EAAgCxE,QAAhC,EAA0C;AACxC,MAAIyE,UAAU,GAAG,CAAjB;AACA,MAAID,KAAK,CAAC5G,KAAN,IAAe,IAAnB,EAAyB,OAAO,CAAP,CAFe,CAIxC;AACA;;AACA,MAAI8G,aAAa,GAAG,CAClB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CADkB,EAElB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAFkB,EAGlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAHkB,EAIlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAJkB,EAKlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CALkB,EAMlB,CAAC,GAAD,EAAM,CAAC,GAAP,EAAY,CAAC,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,CAAC,GAA7B,EAAkC,CAAC,GAAnC,EAAwC,GAAxC,CANkB,EAOlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,CAAC,GAAjB,EAAsB,CAAC,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,CAPkB,EAQlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CARkB,CAApB;AAUA,MAAIC,aAAa,GAAGL,YAAY,CAACI,aAAD,CAAhC;AAEA,MAAIE,UAAU,GAAG,CACf,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CADe,EAEf,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,CAAC,GAAlC,EAAuC,CAAC,GAAxC,CAFe,EAGf,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAHe,EAIf,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAJe,EAKf,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CALe,EAMf,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CANe,EAOf,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,CAAC,GAAlC,EAAuC,CAAC,GAAxC,CAPe,EAQf,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CARe,CAAjB;AAWA,MAAIC,eAAe,GAAG,CACpB,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CADoB,EAEpB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAFoB,EAGpB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAHoB,EAIpB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAJoB,EAKpB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CALoB,EAMpB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CANoB,EAOpB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAPoB,EAQpB,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CARoB,CAAtB;AAUA,MAAIC,eAAe,GAAGR,YAAY,CAACO,eAAD,CAAlC;AAEA,MAAIE,aAAa,GAAG,CAClB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CADkB,EAElB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAFkB,EAGlB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAHkB,EAIlB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAJkB,EAKlB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CALkB,EAMlB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CANkB,EAOlB,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAPkB,EAQlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CARkB,CAApB;AAUA,MAAIC,aAAa,GAAGV,YAAY,CAACS,aAAD,CAAhC;AAEA,MAAIE,SAAS,GAAG,CACd,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CADc,EAEd,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAFc,EAGd,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAHc,EAId,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAJc,EAKd,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,CAAC,GAArC,CALc,EAMd,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CANc,EAOd,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,CAAC,GAAtC,CAPc,EAQd,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CARc,CAAhB;AAWA,MAAIC,aAAa,GAAG,CAClB,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CADkB,EAElB,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CAFkB,EAGlB,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CAHkB,EAIlB,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CAJkB,EAKlB,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CALkB,EAMlB,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,CAAC,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAC,GAA1B,EAA+B,CAAC,GAAhC,EAAqC,CAAC,GAAtC,EAA2C,CAAC,GAA5C,CANkB,EAOlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAPkB,EAQlB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CARkB,CAApB;AAUA,MAAIC,aAAa,GAAGb,YAAY,CAACY,aAAD,CAAhC;AAEA,MAAIE,CAAC,GAAGtG,IAAI,CAACU,KAAL,CAAWQ,QAAQ,GAAG,CAAtB,CAAR;AACA,MAAIqF,CAAC,GAAGrF,QAAQ,GAAG,CAAnB;;AAEA,UAAQwE,KAAK,CAAC5G,KAAN,CAAYuB,WAAZ,EAAR;AACE,SAAK,GAAL;AACEsF,MAAAA,UAAU,GACR,MACA,MAAMD,KAAK,CAAC5G,KAAN,IAAe,GAAf,GAAqB8G,aAAa,CAACW,CAAD,CAAb,CAAiBD,CAAjB,CAArB,GAA2CT,aAAa,CAACU,CAAD,CAAb,CAAiBD,CAAjB,CAAjD,CAFF;AAGA;;AACF,SAAK,GAAL;AACEX,MAAAA,UAAU,GACR,MACA,MAAMD,KAAK,CAAC5G,KAAN,IAAe,GAAf,GAAqBmH,aAAa,CAACM,CAAD,CAAb,CAAiBD,CAAjB,CAArB,GAA2CJ,aAAa,CAACK,CAAD,CAAb,CAAiBD,CAAjB,CAAjD,CAFF;AAGA;;AACF,SAAK,GAAL;AACEX,MAAAA,UAAU,GAAG,MAAM,KAAKG,UAAU,CAACS,CAAD,CAAV,CAAcD,CAAd,CAAxB;AACA;;AACF,SAAK,GAAL;AACEX,MAAAA,UAAU,GACR,MACA,MACGD,KAAK,CAAC5G,KAAN,IAAe,GAAf,GAAqBiH,eAAe,CAACQ,CAAD,CAAf,CAAmBD,CAAnB,CAArB,GAA6CN,eAAe,CAACO,CAAD,CAAf,CAAmBD,CAAnB,CADhD,CAFF;AAIA;;AACF,SAAK,GAAL;AACEX,MAAAA,UAAU,GAAG,OAAO,KAAKQ,SAAS,CAACI,CAAD,CAAT,CAAaD,CAAb,CAAzB;AACA;;AACF,SAAK,GAAL;AACEX,MAAAA,UAAU,GACR,QACA,MAAMD,KAAK,CAAC5G,KAAN,IAAe,GAAf,GAAqBsH,aAAa,CAACG,CAAD,CAAb,CAAiBD,CAAjB,CAArB,GAA2CD,aAAa,CAACE,CAAD,CAAb,CAAiBD,CAAjB,CAAjD,CAFF;AAGA;;AACF;AACEX,MAAAA,UAAU,GAAG,CAAb;AACA;AA9BJ;;AAgCA,SAAOD,KAAK,CAACpH,MAAN,IAAgB,GAAhB,GAAsBqH,UAAtB,GAAmC,CAACA,UAA3C;AACD,C,CAED;AACA;;;AACA,SAASpB,gBAAT,CAA0BxC,CAA1B,EAA6BlD,CAA7B,EAAgC3C,OAAhC,EAAyC;AACvC,MAAIoI,YAAY,GACbkC,MAAM,CAACzE,CAAD,CAAN,IAAayE,MAAM,CAAC3H,CAAD,CAApB,IAA6B,CAAC2H,MAAM,CAACzE,CAAD,CAAP,IAAc,CAACyE,MAAM,CAAC3H,CAAD,CAAlD,GACI,cADJ,GAEI,cAHN;;AAIA,MAAI3C,OAAO,CAAC6F,CAAC,GAAG,CAAJ,GAAQlD,CAAT,CAAP,CAAmBuB,SAAnB,IAAgC,CAApC,EAAuC;AACrCkE,IAAAA,YAAY,GACTkC,MAAM,CAACzE,CAAD,CAAN,IAAayE,MAAM,CAAC3H,CAAD,CAApB,IAA6B,CAAC2H,MAAM,CAACzE,CAAD,CAAP,IAAc,CAACyE,MAAM,CAAC3H,CAAD,CAAlD,GACI,uBADJ,GAEI,uBAHN;AAID;;AACD,MAAI3C,OAAO,CAAC6F,CAAC,GAAG,CAAJ,GAAQlD,CAAT,CAAP,CAAmB8E,QAAnB,IAA+B,CAAnC,EAAsC;AACpCW,IAAAA,YAAY,GACTkC,MAAM,CAACzE,CAAD,CAAN,IAAayE,MAAM,CAAC3H,CAAD,CAApB,IAA6B,CAAC2H,MAAM,CAACzE,CAAD,CAAP,IAAc,CAACyE,MAAM,CAAC3H,CAAD,CAAlD,GACI,0BADJ,GAEI,0BAHN;AAID;;AACD,MACE3C,OAAO,CAAC6F,CAAC,GAAG,CAAJ,GAAQlD,CAAT,CAAP,CAAmBC,KAAnB,IAA4B,IAA5B,IACA5C,OAAO,CAAC6F,CAAC,GAAG,CAAJ,GAAQlD,CAAT,CAAP,CAAmBC,KAAnB,CAAyBuB,WAAzB,MAA0C,GAF5C,EAGE;AACA,QAAInE,OAAO,CAAC6F,CAAC,GAAG,CAAJ,GAAQlD,CAAT,CAAP,CAAmBE,QAAnB,IAA+B,CAAnC,EAAsC;AACpCuF,MAAAA,YAAY,GACTkC,MAAM,CAACzE,CAAD,CAAN,IAAayE,MAAM,CAAC3H,CAAD,CAApB,IAA6B,CAAC2H,MAAM,CAACzE,CAAD,CAAP,IAAc,CAACyE,MAAM,CAAC3H,CAAD,CAAlD,GACI,uBADJ,GAEI,uBAHN;AAID;;AACD,QAAI3C,OAAO,CAAC6F,CAAC,GAAG,CAAJ,GAAQlD,CAAT,CAAP,CAAmBkG,OAAnB,IAA8B,CAAlC,EAAqC;AACnCT,MAAAA,YAAY,GACVpI,OAAO,CAAC6F,CAAC,GAAG,CAAJ,GAAQlD,CAAT,CAAP,CAAmBkG,OAAnB,IAA8B,CAA9B,GAAkC,gBAAlC,GAAqD,cADvD;AAED;AACF;;AACD,SAAOT,YAAP;AACD,C,CACD;;;AACA,SAASmC,KAAT,CAAelL,KAAf,EAAsB;AACpB,sBAAO;AAAQ,IAAA,SAAS,EAAE,OAAnB;AAAA,oBAA8BA,KAAK,CAACC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CACD;;;MAHSiL,K;;AAIT,SAASC,SAAT,CAAmBnL,KAAnB,EAA0B;AACxB,sBAAO;AAAQ,IAAA,SAAS,EAAE,WAAnB;AAAA,oBAAkCA,KAAK,CAACC,KAAN,CAAYK,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;;;MALS6K,S;;AAMT,SAASrH,cAAT,CAAwBf,MAAxB,EAAgCpC,OAAhC,EAAyCgE,WAAzC,EAAsDC,WAAtD,EAAmE;AACjE,QAAM1B,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB;;AACA,MAAIwB,WAAW,IAAIC,WAAnB,EAAgC;AAC9B,SAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIJ,YAAY,CAACI,CAAD,CAAZ,CAAgBC,KAAhB,KAA0BR,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAAhD,CAAJ,EAA0D;AACxDG,QAAAA,YAAY,CAACI,CAAD,CAAZ,CAAgBkG,OAAhB,GAA0B7E,WAAW,IAAI,IAAf,GAAsB,CAAtB,GAA0B,CAApD;AACA;AACD;AACF;AACF;;AACD,SAAOzB,YAAP;AACD,C,CACD;;;AACA,SAASE,eAAT,CAAyBzC,OAAzB,EAAkC;AAChC,QAAMuC,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAIJ,YAAY,CAACI,CAAD,CAAZ,CAAgBuB,SAAhB,IAA6B,CAAjC,EAAoC3B,YAAY,CAACI,CAAD,CAAZ,CAAgBuB,SAAhB,GAA4B,CAA5B;AACrC;;AACD,SAAO3B,YAAP;AACD,C,CACD;;;AACA,SAASG,wBAAT,CAAkC1C,OAAlC,EAA2C;AACzC,QAAMuC,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAIJ,YAAY,CAACI,CAAD,CAAZ,CAAgB8E,QAAhB,IAA4B,CAAhC,EAAmClF,YAAY,CAACI,CAAD,CAAZ,CAAgB8E,QAAhB,GAA2B,CAA3B;AACpC;;AACD,SAAOlF,YAAP;AACD,C,CACD;;;AACA,SAASiF,qBAAT,CAA+BxH,OAA/B,EAAwCoC,MAAxC,EAAgD;AAC9C,QAAMG,YAAY,GAAGvC,OAAO,CAACwC,KAAR,EAArB;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAIJ,YAAY,CAACI,CAAD,CAAZ,CAAgBC,KAAhB,KAA0BR,MAAM,IAAI,GAAV,GAAgB,GAAhB,GAAsB,GAAhD,CAAJ,EAA0D;AACxDG,MAAAA,YAAY,CAACI,CAAD,CAAZ,CAAgBE,QAAhB,GAA2B,CAA3B,CADwD,CAC1B;;AAC9B;AACD;AACF;;AACD,SAAON,YAAP;AACD,C,CAED;AACA;;;AACA,SAAS+H,MAAT,CAAgBhL,KAAhB,EAAuB;AACrB,SAAOA,KAAK,GAAG,CAAf;AACD,C,CAED;;;AACA,eAAe0J,IAAf","sourcesContent":["// return a square with the chess piece\nimport React from \"react\";\nimport King from \"../components/King\";\nimport Queen from \"../components/Queen\";\nimport Knight from \"../components/Knight\";\nimport Pawn from \"../components/Pawn\";\nimport Rook from \"../components/Rook\";\nimport Bishop from \"../components/Bishop\";\nimport filler_piece from \"../components/Filler_piece\";\nimport black_defeat_sound from \"../assets/sounds/Black_Defeat.mp3\"\nimport white_defeat_sound from \"../assets/sounds/White_Defeat.mp3\";\nimport capture_sound from \"../assets/sounds/Capture.mp3\";\nimport stalemate_sound from \"../assets/sounds/Stalemate.mp3\";\nimport check_flash_sound from \"../assets/sounds/Check_Flash.mp3\";\nimport check_sound from \"../assets/sounds/Check.mp3\";\nimport move_sound from \"../assets/sounds/Move.mp3\";\nimport style from \"../css/style.css\";\n\nfunction Square(props) {\n  if (props.value != null) {\n    return (\n      <button\n        className={\"square \" + props.color + props.corner + props.cursor}\n        onClick={props.onClick}\n      >\n        {props.value.icon}\n      </button>\n    );\n  } else {\n    return (\n      <button\n        className={\"square \" + props.color + props.corner + props.cursor}\n        onClick={props.onClick}\n      >\n        {\" \"}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  // initialize the board\n  constructor() {\n    super();\n    this.state = {\n      squares: initializeBoard(),\n      source: -1,\n      turn: \"w\",\n      true_turn: \"w\",\n      turn_num: 0,\n      first_pos: null,\n      second_pos: null,\n      repetition: 0,\n      white_king_has_moved: 0,\n      black_king_has_moved: 0,\n      left_black_rook_has_moved: 0,\n      right_black_rook_has_moved: 0,\n      left_white_rook_has_moved: 0,\n      right_white_rook_has_moved: 0,\n      passant_pos: 65,\n      bot_running: 0,\n      pieces_collected_by_white: [],\n      pieces_collected_by_black: [],\n      history: [initializeBoard()],\n      history_num: 1,\n      history_h1: [null],\n      history_h2: [null],\n      history_h3: [null],\n      history_h4: [null],\n      history_white_collection: [null],\n      history_black_collection: [null],\n      mated: false,\n      move_made: false,\n      capture_made: false,\n      check_flash: false,\n      viewing_history: false,\n      just_clicked: false,\n    };\n  }\n\n  // reset the board\n  reset() {\n    if (\n      this.state.history_num - 1 == this.state.turn_num &&\n      this.state.turn == \"b\" &&\n      !this.state.mated\n    )\n      return \"cannot reset\";\n    this.setState({\n      squares: initializeBoard(),\n      source: -1,\n      turn: \"w\",\n      true_turn: \"w\",\n      turn_num: 0,\n      first_pos: null,\n      second_pos: null,\n      repetition: 0,\n      white_king_has_moved: 0,\n      black_king_has_moved: 0,\n      left_black_rook_has_moved: 0,\n      right_black_rook_has_moved: 0,\n      left_white_rook_has_moved: 0,\n      right_white_rook_has_moved: 0,\n      passant_pos: 65,\n      bot_running: 0,\n      pieces_collected_by_white: [],\n      pieces_collected_by_black: [],\n      history: [initializeBoard()],\n      history_num: 1,\n      history_h1: [0],\n      history_h2: [0],\n      history_h3: [null],\n      history_h4: [null],\n      history_white_collection: [null],\n      history_black_collection: [null],\n      mated: false,\n      move_made: false,\n      capture_made: false,\n      check_flash: false,\n      viewing_history: false,\n      just_clicked: false,\n    });\n  }\n\n  // full function for executing a move\n  execute_move(player, squares, start, end) {\n    let copy_squares = squares.slice();\n\n    // clear highlights\n    copy_squares = clear_highlight(copy_squares).slice();\n    if (player == \"w\") {\n      copy_squares = clear_possible_highlight(copy_squares).slice();\n      for (let j = 0; j < 64; j++) {\n        // user has heeded warning\n        if (copy_squares[j].ascii == \"k\") {\n          copy_squares[j].in_check = 0;\n          break;\n        }\n      }\n    }\n\n    // note if king or rook has moved (castling not allowed if these have moved)\n    if (copy_squares[start].ascii == (player == \"w\" ? \"k\" : \"K\")) {\n      if (player == \"w\") {\n        this.setState({\n          white_king_has_moved: 1,\n        });\n      } else {\n        this.setState({\n          black_king_has_moved: 1,\n        });\n      }\n    }\n    if (copy_squares[start].ascii == (player == \"w\" ? \"r\" : \"R\")) {\n      if (start == (player == \"w\" ? 56 : 0)) {\n        if (player == \"w\") {\n          this.setState({\n            left_white_rook_has_moved: 1,\n          });\n        } else {\n          this.setState({\n            left_black_rook_has_moved: 1,\n          });\n        }\n      } else if (start == (player == \"w\" ? 63 : 7)) {\n        if (player == \"w\") {\n          this.setState({\n            right_white_rook_has_moved: 1,\n          });\n        } else {\n          this.setState({\n            right_black_rook_has_moved: 1,\n          });\n        }\n      }\n    }\n\n    // add captured pieces to collection\n    const collection =\n      player == \"w\"\n        ? this.state.pieces_collected_by_white.slice()\n        : this.state.pieces_collected_by_black.slice();\n    if (copy_squares[end].ascii != null) {\n      collection.push(<Collected value={copy_squares[end]} />);\n      this.setState({\n        capture_made: true,\n      });\n    }\n    if (copy_squares[start].ascii == (player == \"w\" ? \"p\" : \"P\")) {\n      if (end - start == (player == \"w\" ? -9 : 7)) {\n        // black going down to the left OR white going up to the left\n        if (start - 1 == this.state.passant_pos)\n          collection.push(<Collected value={copy_squares[start - 1]} />);\n      } else if (end - start == (player == \"w\" ? -7 : 9)) {\n        // black going down to the right OR white going up to the right\n        if (start + 1 == this.state.passant_pos)\n          collection.push(<Collected value={copy_squares[start + 1]} />);\n      }\n    }\n\n    // make the move\n    copy_squares = this.make_move(copy_squares, start, end).slice();\n\n    // en passant helper\n    var passant_true =\n      player == \"w\"\n        ? copy_squares[end].ascii == \"p\" &&\n          start >= 48 &&\n          start <= 55 &&\n          end - start == -16\n        : copy_squares[end].ascii == \"P\" &&\n          start >= 8 &&\n          start <= 15 &&\n          end - start == 16;\n    let passant = passant_true ? end : 65;\n\n    // highlight mate\n    if (player == \"w\") {\n      copy_squares = highlight_mate(\n        \"b\",\n        copy_squares,\n        this.checkmate(\"b\", copy_squares),\n        this.stalemate(\"b\", copy_squares)\n      ).slice();\n    } else {\n      copy_squares = highlight_mate(\n        \"w\",\n        copy_squares,\n        this.checkmate(\"w\", copy_squares),\n        this.stalemate(\"w\", copy_squares)\n      ).slice();\n    }\n\n    // adding state to history array\n    const copy_history = this.state.history.slice();\n    const copy_history_h1 = this.state.history_h1.slice();\n    const copy_history_h2 = this.state.history_h2.slice();\n    const copy_history_h3 = this.state.history_h3.slice();\n    const copy_history_h4 = this.state.history_h4.slice();\n    const copy_white_collection = this.state.history_white_collection.slice();\n    const copy_black_collection = this.state.history_black_collection.slice();\n    copy_history.push(copy_squares);\n    copy_history_h1.push(start);\n    copy_history_h2.push(end);\n    copy_white_collection.push(\n      player == \"w\" ? collection : this.state.pieces_collected_by_white\n    );\n    copy_black_collection.push(\n      player == \"b\" ? collection : this.state.pieces_collected_by_black\n    );\n\n    var isKing =\n      copy_squares[end].ascii == \"k\" || copy_squares[end].ascii == \"K\";\n    if (isKing && Math.abs(end - start) == 2) {\n      if (end == (copy_squares[end].ascii == \"k\" ? 62 : 6)) {\n        copy_history_h3.push(end - 1);\n        copy_history_h4.push(end + 1);\n      } else if (end == (copy_squares[end].ascii == \"k\" ? 58 : 2)) {\n        copy_history_h3.push(end + 1);\n        copy_history_h4.push(end - 2);\n      }\n    } else {\n      copy_history_h3.push(null);\n      copy_history_h4.push(null);\n    }\n\n    let check_mated =\n      this.checkmate(\"w\", copy_squares) || this.checkmate(\"b\", copy_squares);\n    let stale_mated =\n      (this.stalemate(\"w\", copy_squares) && player == \"b\") ||\n      (this.stalemate(\"b\", copy_squares) && player == \"w\");\n\n    this.setState({\n      passant_pos: passant,\n      history: copy_history,\n      history_num: this.state.history_num + 1,\n      history_h1: copy_history_h1,\n      history_h2: copy_history_h2,\n      history_h3: copy_history_h3,\n      history_h4: copy_history_h4,\n      history_white_collection: copy_white_collection,\n      history_black_collection: copy_black_collection,\n      squares: copy_squares,\n      source: -1,\n      turn_num: this.state.turn_num + 1,\n      mated: check_mated || stale_mated ? true : false,\n      turn: player == \"b\" ? \"w\" : \"b\",\n      true_turn: player == \"b\" ? \"w\" : \"b\",\n      bot_running: player == \"b\" ? 0 : 1,\n      move_made: true,\n    });\n\n    // set state\n    if (player == \"b\") {\n      this.setState({\n        first_pos: start,\n        second_pos: end,\n        pieces_collected_by_black: collection,\n      });\n    } else {\n      this.setState({\n        pieces_collected_by_white: collection,\n      });\n    }\n  }\n\n  // make a move\n  make_move(squares, start, end, passant_pos) {\n    const copy_squares = squares.slice();\n    // castling\n    var isKing =\n      copy_squares[start].ascii == \"k\" || copy_squares[start].ascii == \"K\";\n    if (isKing && Math.abs(end - start) == 2) {\n      if (end == (copy_squares[start].ascii == \"k\" ? 62 : 6)) {\n        copy_squares[end - 1] = copy_squares[end + 1];\n        copy_squares[end - 1].highlight = 1;\n        copy_squares[end + 1] = new filler_piece(null);\n        copy_squares[end + 1].highlight = 1;\n      } else if (end == (copy_squares[start].ascii == \"k\" ? 58 : 2)) {\n        copy_squares[end + 1] = copy_squares[end - 2];\n        copy_squares[end + 1].highlight = 1;\n        copy_squares[end - 2] = new filler_piece(null);\n        copy_squares[end - 2].highlight = 1;\n      }\n    }\n\n    // en passant\n    var passant = passant_pos == null ? this.state.passant_pos : passant_pos;\n    if (copy_squares[start].ascii.toLowerCase() == \"p\") {\n      if (end - start == -7 || end - start == 9) {\n        // white going up to the right\n        if (start + 1 == passant)\n          copy_squares[start + 1] = new filler_piece(null);\n      } else if (end - start == -9 || end - start == 7) {\n        // white going up to the left\n        if (start - 1 == passant)\n          copy_squares[start - 1] = new filler_piece(null);\n      }\n    }\n\n    // make the move\n    copy_squares[end] = copy_squares[start];\n    copy_squares[end].highlight = 1;\n    copy_squares[start] = new filler_piece(null);\n    copy_squares[start].highlight = 1;\n\n    // pawn promotion\n    if (copy_squares[end].ascii == \"p\" && end >= 0 && end <= 7) {\n      copy_squares[end] = new Queen(\"w\");\n      copy_squares[end].highlight = 1;\n    }\n    if (copy_squares[end].ascii == \"P\" && end >= 56 && end <= 63) {\n      copy_squares[end] = new Queen(\"b\");\n      copy_squares[end].highlight = 1;\n    }\n\n    return copy_squares;\n  }\n\n  // returns true if castling is allowed\n  castling_allowed(start, end, squares) {\n    const copy_squares = squares.slice();\n    var player = copy_squares[start].player;\n    var delta_pos = end - start;\n    if (start != (player == \"w\" ? 60 : 4)) return false;\n    if (\n      (delta_pos == 2\n        ? copy_squares[end + 1].ascii\n        : copy_squares[end - 2].ascii) != (player == \"w\" ? \"r\" : \"R\")\n    )\n      return false;\n    if (\n      (player == \"w\"\n        ? this.state.white_king_has_moved\n        : this.state.black_king_has_moved) != 0\n    )\n      return false;\n    if (player == \"w\") {\n      if (\n        (delta_pos == 2\n          ? this.state.right_white_rook_has_moved\n          : this.state.left_white_rook_has_moved) != 0\n      )\n        return false;\n    } else if (player == \"b\") {\n      if (\n        (delta_pos == 2\n          ? this.state.right_black_rook_has_moved\n          : this.state.left_black_rook_has_moved) != 0\n      )\n        return false;\n    }\n\n    return true;\n  }\n  // returns true if a piece is trying to skip over another piece\n  blockers_exist(start, end, squares) {\n    var start_row = 8 - Math.floor(start / 8);\n    var start_col = (start % 8) + 1;\n    var end_row = 8 - Math.floor(end / 8);\n    var end_col = (end % 8) + 1;\n    let row_diff = end_row - start_row;\n    let col_diff = end_col - start_col;\n    let row_ctr = 0;\n    let col_ctr = 0;\n    const copy_squares = squares.slice();\n\n    // return true if the piece in question is skipping over a piece\n    while (col_ctr != col_diff || row_ctr != row_diff) {\n      let position =\n        64 - start_row * 8 + -8 * row_ctr + (start_col - 1 + col_ctr);\n      if (\n        copy_squares[position].ascii != null &&\n        copy_squares[position] != copy_squares[start]\n      )\n        return true;\n      if (col_ctr != col_diff) {\n        if (col_diff > 0) {\n          ++col_ctr;\n        } else {\n          --col_ctr;\n        }\n      }\n      if (row_ctr != row_diff) {\n        if (row_diff > 0) {\n          ++row_ctr;\n        } else {\n          --row_ctr;\n        }\n      }\n    }\n    return false;\n  }\n  // return true if pawn is not breaking any of its rules\n  good_pawn(start, end, squares, passant_pos) {\n    var passant = passant_pos == null ? this.state.passant_pos : passant_pos;\n    var start_row = 8 - Math.floor(start / 8);\n    var start_col = (start % 8) + 1;\n    var end_row = 8 - Math.floor(end / 8);\n    var end_col = (end % 8) + 1;\n    var row_diff = end_row - start_row;\n    var col_diff = end_col - start_col;\n    const copy_squares = squares.slice();\n\n    // only allow 2 space move if the pawn is in the start position\n    if (row_diff == 2 || row_diff == -2) {\n      if (copy_squares[start].player == \"w\" && (start < 48 || start > 55))\n        return false;\n      if (copy_squares[start].player == \"b\" && (start < 8 || start > 15))\n        return false;\n    }\n    // cannot move up/down if there is a piece\n    if (copy_squares[end].ascii != null) {\n      if (col_diff == 0) return false;\n    }\n    // cannot move diagonally if there is no piece to capture UNLESS it's en passant\n    if (row_diff == 1 && col_diff == 1) {\n      // white going up and right\n      if (copy_squares[end].ascii == null) {\n        if (copy_squares[start + 1].ascii != \"P\" || passant != start + 1)\n          return false;\n      }\n    } else if (row_diff == 1 && col_diff == -1) {\n      // white going up and left\n      if (copy_squares[end].ascii == null) {\n        if (copy_squares[start - 1].ascii != \"P\" || passant != start - 1)\n          return false;\n      }\n    } else if (row_diff == -1 && col_diff == 1) {\n      // black going down and right\n      if (copy_squares[end].ascii == null) {\n        if (copy_squares[start + 1].ascii != \"p\" || passant != start + 1)\n          return false;\n      }\n    } else if (row_diff == -1 && col_diff == -1) {\n      // black going down and left\n      if (copy_squares[end].ascii == null) {\n        if (copy_squares[start - 1].ascii != \"p\" || passant != start - 1)\n          return false;\n      }\n    }\n\n    return true;\n  }\n  // return true if move from start to end is illegal\n  invalid_move(start, end, squares, passant_pos) {\n    const copy_squares = squares.slice();\n    // if the piece is a bishop, queen, rook, or pawn,\n    // it cannot skip over pieces\n    var bqrpk =\n      copy_squares[start].ascii.toLowerCase() == \"r\" ||\n      copy_squares[start].ascii.toLowerCase() == \"q\" ||\n      copy_squares[start].ascii.toLowerCase() == \"b\" ||\n      copy_squares[start].ascii.toLowerCase() == \"p\" ||\n      copy_squares[start].ascii.toLowerCase() == \"k\";\n    let invalid =\n      bqrpk == true && this.blockers_exist(start, end, copy_squares) == true;\n    if (invalid) return invalid;\n    // checking for certain rules regarding the pawn\n    var pawn = copy_squares[start].ascii.toLowerCase() == \"p\";\n    invalid =\n      pawn == true &&\n      this.good_pawn(start, end, copy_squares, passant_pos) == false;\n    if (invalid) return invalid;\n    // checking for if castling is allowed\n    var king = copy_squares[start].ascii.toLowerCase() == \"k\";\n    if (king && Math.abs(end - start) == 2)\n      invalid = this.castling_allowed(start, end, copy_squares) == false;\n\n    return invalid;\n  }\n  // returns true if there are any possible moves\n  can_move_there(start, end, squares, passant_pos) {\n    const copy_squares = squares.slice();\n    if (start == end)\n      // cannot move to the position you're already sitting in\n      return false;\n\n    // player cannot capture her own piece\n    // and piece must be able to physically move from start to end\n    var player = copy_squares[start].player;\n    if (\n      player == copy_squares[end].player ||\n      copy_squares[start].can_move(start, end) == false\n    )\n      return false;\n    // player cannot make an invalid move\n    if (this.invalid_move(start, end, copy_squares, passant_pos) == true)\n      return false;\n\n    // cannot castle if in check\n    var cant_castle =\n      copy_squares[start].ascii == (player == \"w\" ? \"k\" : \"K\") &&\n      Math.abs(end - start) == 2 &&\n      this.in_check(player, copy_squares);\n    if (cant_castle) return false;\n\n    // king cannot castle through check\n    if (\n      copy_squares[start].ascii == (player == \"w\" ? \"k\" : \"K\") &&\n      Math.abs(end - start) == 2\n    ) {\n      var delta_pos = end - start;\n      const test_squares = squares.slice();\n      test_squares[start + (delta_pos == 2 ? 1 : -1)] = test_squares[start];\n      test_squares[start] = new filler_piece(null);\n      if (this.in_check(player, test_squares)) return false;\n    }\n\n    // player cannot put or keep herself in check\n    const check_squares = squares.slice();\n    check_squares[end] = check_squares[start];\n    check_squares[start] = new filler_piece(null);\n    if (check_squares[end].ascii == \"p\" && end >= 0 && end <= 7) {\n      check_squares[end] = new Queen(\"w\");\n    } else if (check_squares[end].ascii == \"P\" && end >= 56 && end <= 63) {\n      check_squares[end] = new Queen(\"b\");\n    }\n    if (this.in_check(player, check_squares) == true) return false;\n\n    return true;\n  }\n\n  // returns true if player is in check\n  in_check(player, squares) {\n    let king = player == \"w\" ? \"k\" : \"K\";\n    let position_of_king = null;\n    const copy_squares = squares.slice();\n    for (let i = 0; i < 64; i++) {\n      if (copy_squares[i].ascii == king) {\n        position_of_king = i;\n        break;\n      }\n    }\n\n    // traverse through the board and determine\n    // any of the opponent's pieces can legally take the player's king\n    for (let i = 0; i < 64; i++) {\n      if (copy_squares[i].player != player) {\n        if (\n          copy_squares[i].can_move(i, position_of_king) == true &&\n          this.invalid_move(i, position_of_king, copy_squares) == false\n        )\n          return true;\n      }\n    }\n    return false;\n  }\n  // return true if player is in stalemate\n  stalemate(player, squares) {\n    if (this.in_check(player, squares)) return false;\n\n    // if there is even only 1 way to move her piece,\n    // the player is not in stalemate\n    for (let i = 0; i < 64; i++) {\n      if (squares[i].player == player) {\n        for (let j = 0; j < 64; j++) {\n          if (this.can_move_there(i, j, squares)) return false;\n        }\n      }\n    }\n    return true;\n  }\n  // return true if player is in checkmate\n  checkmate(player, squares) {\n    if (!this.in_check(player, squares)) return false;\n    // if there is even only 1 way to move her piece,\n    // the player is not in checkmate\n    for (let i = 0; i < 64; i++) {\n      if (squares[i].player == player) {\n        for (let j = 0; j < 64; j++) {\n          if (this.can_move_there(i, j, squares)) return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  // helper function for minimax: calculate black's status using piece values\n  evaluate_black(squares) {\n    let total_eval = 0;\n    for (let i = 0; i < 64; i++) total_eval += get_piece_value(squares[i], i);\n    return total_eval;\n  }\n  // helper function for execute_bot: minimax algorithm for chess bot\n  minimax(\n    depth,\n    is_black_player,\n    alpha,\n    beta,\n    squares,\n    RA_of_starts,\n    RA_of_ends,\n    passant_pos\n  ) {\n    const copy_squares = squares.slice();\n    if (depth == 0) {\n      return this.evaluate_black(copy_squares);\n    }\n\n    let best_value = is_black_player ? -9999 : 9999;\n    // iterate through the possible start positions\n    for (let i = 0; i < 64; i++) {\n      let start = RA_of_starts[i];\n      let isPlayerPiece =\n        copy_squares[start].ascii != null &&\n        copy_squares[start].player == (is_black_player ? \"b\" : \"w\");\n\n      // start should be the position of a piece owned by the player\n      if (isPlayerPiece) {\n        /* iterate through the possible end positions for each possible start position\n         * and use recursion to see what the value of each possible move will be a few moves\n         * down the road. if the move being analyzed is black's turn, the value will maximize\n         * best_value; but if the move being analyzed is white's turn, the value will minimize\n         * best_value\n         */\n        for (let j = 0; j < 64; j++) {\n          let end = RA_of_ends[j];\n          if (\n            this.can_move_there(start, end, copy_squares, passant_pos) == true\n          ) {\n            const test_squares = squares.slice();\n            // make the move on test board\n            const test_squares_2 = this.make_move(\n              test_squares,\n              start,\n              end,\n              passant_pos\n            ).slice();\n            // en passant helper\n            var passant = 65;\n            if (\n              test_squares[end].ascii == (is_black_player ? \"P\" : \"p\") &&\n              start >= (is_black_player ? 8 : 48) &&\n              start <= (is_black_player ? 15 : 55) &&\n              end - start == (is_black_player ? 16 : -16)\n            ) {\n              passant = end;\n            }\n\n            // black player maximizes value, white player minimizes value\n            let value = this.minimax(\n              depth - 1,\n              !is_black_player,\n              alpha,\n              beta,\n              test_squares_2,\n              RA_of_starts,\n              RA_of_ends,\n              passant\n            );\n            if (is_black_player) {\n              if (value > best_value) best_value = value;\n              alpha = Math.max(alpha, best_value); //alpha-beta pruning\n              if (best_value >= beta) return best_value;\n            } else {\n              if (value < best_value) best_value = value;\n              beta = Math.min(beta, best_value); //alpha-beta pruning\n              if (best_value <= alpha) return best_value;\n            }\n          }\n        }\n      }\n    }\n\n    return best_value;\n  }\n  // Chess bot for black player\n  execute_bot(depth, passed_in_squares) {\n    if (this.state.mated) return \"bot cannot run\";\n    const copy_squares = passed_in_squares.slice();\n    let rand_start = 100;\n    let rand_end = 100;\n    let RA_of_starts = [];\n    let RA_of_ends = [];\n    for (let i = 0; i < 64; i++) {\n      RA_of_starts.push(i);\n      RA_of_ends.push(i);\n    }\n    RA_of_starts = shuffle(RA_of_starts);\n    RA_of_ends = shuffle(RA_of_ends);\n\n    // create array of possible moves\n    let moves = [];\n    for (let i = 0; i < 64; i++) {\n      let start = RA_of_starts[i];\n      let isBlackPiece =\n        copy_squares[start].ascii != null && copy_squares[start].player == \"b\";\n      if (isBlackPiece) {\n        for (let j = 0; j < 64; j++) {\n          let end = RA_of_ends[j];\n          if (this.can_move_there(start, end, copy_squares) == true) {\n            moves.push(start);\n            moves.push(end);\n          }\n        }\n      }\n    }\n\n    let best_value = -9999;\n    /* iterate through the possible movements and choose the movement from start to end that results in the best\n     * position for black in terms of value calculated by evaluate_black; minimax algo lets bot look ahead a few\n     * moves and thereby pick the move that results in the best value in the long run\n     */\n    for (let i = 0; i < moves.length; i += 2) {\n      let start = moves[i];\n      let end = moves[i + 1];\n      // 3-fold repetiton by bot NOT ALLOWED if there are other move options\n      if (\n        moves.length > 2 &&\n        this.state.repetition >= 2 &&\n        start == this.state.second_pos &&\n        end == this.state.first_pos\n      ) {\n        this.setState({\n          repetition: 0,\n        });\n      } else {\n        const test_squares = passed_in_squares.slice();\n        // make the move\n        const test_squares_2 = this.make_move(test_squares, start, end).slice();\n        // en passant helper\n        var passant_pos = 65;\n        if (\n          test_squares[start].ascii == \"P\" &&\n          start >= 8 &&\n          start <= 15 &&\n          end - start == 16\n        )\n          passant_pos = end;\n\n        // board evaluation using mini_max algorithm by looking at future turns\n        let board_eval = this.minimax(\n          depth - 1,\n          false,\n          -1000,\n          1000,\n          test_squares_2,\n          RA_of_starts,\n          RA_of_ends,\n          passant_pos\n        );\n        if (board_eval >= best_value) {\n          best_value = board_eval;\n          rand_start = start;\n          rand_end = end;\n        }\n      }\n    }\n\n    if (rand_end != 100) {\n      // rand_end == 100 indicates that black is in checkmate/stalemate\n      // increment this.state.repetition if black keeps moving a piece back and forth consecutively\n      if (\n        rand_start == this.state.second_pos &&\n        rand_end == this.state.first_pos\n      ) {\n        let reps = this.state.repetition + 1;\n        this.setState({\n          repetition: reps,\n        });\n      } else {\n        this.setState({\n          repetition: 0,\n        });\n      }\n\n      this.execute_move(\"b\", copy_squares, rand_start, rand_end);\n    }\n  }\n\n  // handle user action of clicking square on board\n  handleClick(i) {\n    let copy_squares = this.state.squares.slice();\n\n    if (this.state.history_num - 1 != this.state.turn_num) {\n      return \"currently viewing history\";\n    }\n\n    if (this.state.mated) return \"game-over\";\n\n    // first click\n    if (this.state.source == -1 && this.state.bot_running == 0) {\n      // no source has been selected yet\n      // can only pick a piece that is your own\n      if (copy_squares[i].player != this.state.turn) return -1;\n\n      //can only pick a piece that is not a blank square\n      if (copy_squares[i].player != null) {\n        this.setState({\n          check_flash: false,\n          just_clicked: false,\n          move_made: false,\n          capture_made: false,\n          viewing_history: false,\n        });\n\n        copy_squares = clear_check_highlight(copy_squares, \"w\").slice();\n        copy_squares[i].highlight = 1; // highlight selected piece\n\n        // highlight legal moves\n        for (let j = 0; j < 64; j++) {\n          if (this.can_move_there(i, j, copy_squares))\n            copy_squares[j].possible = 1;\n        }\n\n        this.setState({\n          source: i, // set the source to the first click\n          squares: copy_squares,\n        });\n      }\n    }\n\n    // second click (to move piece from the source to destination)\n    if (this.state.source > -1) {\n      var cannibalism = copy_squares[i].player == this.state.turn;\n      /* if user is trying to select one of her other pieces,\n       * change highlight to the new selection, but do not move any pieces\n       */\n      if (cannibalism == true && this.state.source != i) {\n        copy_squares[i].highlight = 1;\n        copy_squares[this.state.source].highlight = 0;\n        copy_squares = clear_possible_highlight(copy_squares).slice();\n        for (let j = 0; j < 64; j++) {\n          if (this.can_move_there(i, j, copy_squares))\n            copy_squares[j].possible = 1;\n        }\n        this.setState({\n          source: i, // set source to the new clicks\n          squares: copy_squares,\n        });\n      } else {\n        // user is trying to move her piece to empty space or to capture opponent's piece\n        if (!this.can_move_there(this.state.source, i, copy_squares)) {\n          // un-highlight selection if invalid move was attempted\n          copy_squares[this.state.source].highlight = 0;\n          copy_squares = clear_possible_highlight(copy_squares).slice();\n          // if user is in check, highlight king in red if user tries a move that doesn't get her\n          // out of check\n          if (\n            i != this.state.source &&\n            this.in_check(\"w\", copy_squares) == true\n          ) {\n            for (let j = 0; j < 64; j++) {\n              if (copy_squares[j].ascii == \"k\") {\n                copy_squares[j].in_check = 1;\n                break;\n              }\n            }\n            this.setState({\n              check_flash: true,\n            });\n          }\n          this.setState({\n            source: -1,\n            squares: copy_squares,\n          });\n          return \"invalid move\";\n        }\n\n        this.execute_move(\"w\", copy_squares, this.state.source, i);\n\n        setTimeout(() => {\n          this.setState({\n            move_made: false,\n            capture_made: false,\n          });\n        }, 200);\n\n        // chess bot for black player\n        let search_depth = 3;\n        setTimeout(() => {\n          this.execute_bot(search_depth, this.state.squares);\n        }, 700);\n      }\n    }\n  }\n\n  // Render the page\n  render() {\n    const row_nums = [];\n    for (let i = 8; i > 0; i--) {\n      row_nums.push(<Label key={i} value={i} />);\n    }\n    const col_nums = [];\n    for (let i = 1; i < 9; i++) {\n      let letter;\n      switch (i) {\n        case 1:\n          letter = \"A\";\n          break;\n        case 2:\n          letter = \"B\";\n          break;\n        case 3:\n          letter = \"C\";\n          break;\n        case 4:\n          letter = \"D\";\n          break;\n        case 5:\n          letter = \"E\";\n          break;\n        case 6:\n          letter = \"F\";\n          break;\n        case 7:\n          letter = \"G\";\n          break;\n        case 8:\n          letter = \"H\";\n          break;\n      }\n      col_nums.push(<Label key={letter} value={letter} />);\n    }\n\n    const board = [];\n    for (let i = 0; i < 8; i++) {\n      const squareRows = [];\n      for (let j = 0; j < 8; j++) {\n        let square_corner = null;\n        if (i == 0 && j == 0) {\n          square_corner = \" top_left_square \";\n        } else if (i == 0 && j == 7) {\n          square_corner = \" top_right_square \";\n        } else if (i == 7 && j == 0) {\n          square_corner = \" bottom_left_square \";\n        } else if (i == 7 && j == 7) {\n          square_corner = \" bottom_right_square \";\n        } else {\n          square_corner = \" \";\n        }\n\n        const copy_squares = this.state.squares.slice();\n        let square_color = calc_squareColor(i, j, copy_squares);\n        let square_cursor = \"pointer\";\n        if (copy_squares[i * 8 + j].player != \"w\") square_cursor = \"default\";\n        if (this.state.bot_running == 1 && !this.state.mated)\n          square_cursor = \"bot_running\";\n        if (this.state.mated) square_cursor = \"default\";\n        if (this.state.history_num - 1 != this.state.turn_num)\n          square_cursor = \"not_allowed\";\n\n        squareRows.push(\n          <Square\n            key={i * 8 + j}\n            value={copy_squares[i * 8 + j]}\n            color={square_color}\n            corner={square_corner}\n            cursor={square_cursor}\n            onClick={() => this.handleClick(i * 8 + j)}\n          />\n        );\n      }\n      board.push(<div key={i}>{squareRows}</div>);\n    }\n\n    let black_mated = this.checkmate(\"b\", this.state.squares);\n    let white_mated = this.checkmate(\"w\", this.state.squares);\n    let not_history =\n      !(this.state.history_num - 1 != this.state.turn_num) &&\n      !this.state.viewing_history;\n    let stale =\n      (this.stalemate(\"w\", this.state.squares) && this.state.turn == \"w\") ||\n      (this.stalemate(\"b\", this.state.squares) && this.state.turn == \"b\");\n\n    return (\n      <div>\n        {this.state.move_made && !this.state.capture_made && (\n          <div>\n            <audio\n              ref=\"audio_tag\"\n              src={move_sound}\n              controls\n              autoPlay\n              hidden\n            />{\" \"}\n          </div>\n        )}\n        {this.state.capture_made && not_history && (\n          <div>\n            <audio\n              ref=\"audio_tag\"\n              src={capture_sound}\n              controls\n              autoPlay\n              hidden\n            />{\" \"}\n          </div>\n        )}\n        {black_mated && not_history && (\n          <div>\n            <audio\n              ref=\"audio_tag\"\n              src={black_defeat_sound}\n              controls\n              autoPlay\n              hidden\n            />{\" \"}\n          </div>\n        )}\n        {white_mated && not_history && (\n          <div>\n            <audio\n              ref=\"audio_tag\"\n              src={white_defeat_sound}\n              controls\n              autoPlay\n              hidden\n            />{\" \"}\n          </div>\n        )}\n        {stale && not_history && (\n          <div>\n            <audio\n              ref=\"audio_tag\"\n              src={stalemate_sound}\n              controls\n              autoPlay\n              hidden\n            />{\" \"}\n          </div>\n        )}\n        {this.state.check_flash &&\n          !(this.state.history_num - 1 != this.state.turn_num) &&\n          !this.state.just_clicked && (\n            <div>\n              {\" \"}\n              <audio\n                ref=\"audio_tag\"\n                src=\"../assets/sounds/Check_Flash.mp3\"\n                controls\n                autoPlay\n                hidden\n              />{\" \"}\n            </div>\n          )}\n\n        <div className=\"bounceInDown\">\n          <div className=\"left_screen bounceInDown\">\n            <div className=\"side_box\">\n              <div className=\"content\">\n                <p className=\"header_font\">ReactJS Chess</p>\n                <p className=\"medium_font\">\n                  Play against our friendly bot!&nbsp;&nbsp;\n                  <a href=\"./how_to_play.html\" target=\"_blank\">\n                    How to Play\n                  </a>\n                </p>\n              </div>\n            </div>\n\n            <div className=\"side_box\">\n              <div className=\"content title\">\n                <p className=\"header_2_font\">Match Information</p>\n              </div>\n\n              <div className=\"wrapper\">\n                <div className=\"player_box\">\n                  <p className=\"medium_font\">White (You)</p>\n                  {this.state.pieces_collected_by_white}\n                </div>\n                <div className=\"player_box black_player_color\">\n                  <p className=\"medium_font\">Black (Bot)</p>\n                  {this.state.pieces_collected_by_black}\n                </div>\n              </div>\n              <div className=\"wrapper\">\n                {this.state.turn == \"w\" ? (\n                  <div className=\"highlight_box\"></div>\n                ) : (\n                  <div className=\"highlight_box transparent\"></div>\n                )}\n                {this.state.turn == \"b\" ? (\n                  <div className=\"highlight_box\"></div>\n                ) : (\n                  <div className=\"highlight_box transparent\"></div>\n                )}\n              </div>\n\n              <div className=\"button_wrapper\">\n                <button\n                  className=\"reset_button history\"\n                  onClick={() => this.viewHistory(\"back_atw\")}\n                >\n                  <p className=\"button_font\">&lt;&lt;</p>\n                </button>\n                <button\n                  className=\"reset_button history\"\n                  onClick={() => this.viewHistory(\"back\")}\n                >\n                  <p className=\"button_font\">&lt;</p>\n                </button>\n                <button className=\"reset_button\" onClick={() => this.reset()}>\n                  <p className=\"button_font\">Restart Game</p>\n                </button>\n                <button\n                  className=\"reset_button history\"\n                  onClick={() => this.viewHistory(\"next\")}\n                >\n                  <p className=\"button_font\">&gt;</p>\n                </button>\n                <button\n                  className=\"reset_button history\"\n                  onClick={() => this.viewHistory(\"next_atw\")}\n                >\n                  <p className=\"button_font\">&gt;&gt;</p>\n                </button>\n              </div>\n\n              <div className=\"mate_wrapper\">\n                <p className=\"small_font\">\n                  {this.in_check(\"w\", this.state.squares) &&\n                  !this.checkmate(\"w\", this.state.squares) == true\n                    ? \"You are in check!\"\n                    : \"\"}\n                </p>\n                <p className=\"small_font\">\n                  {this.in_check(\"b\", this.state.squares) &&\n                  !this.checkmate(\"b\", this.state.squares) == true\n                    ? \"Black player is in check.\"\n                    : \"\"}\n                </p>\n                <p className=\"small_font\">\n                  {this.checkmate(\"w\", this.state.squares) == true\n                    ? \"You lost by checkmate.\"\n                    : \"\"}\n                </p>\n                <p className=\"small_font\">\n                  {this.checkmate(\"b\", this.state.squares) == true\n                    ? \"You won by checkmate!\"\n                    : \"\"}\n                </p>\n                <p className=\"small_font\">\n                  {(this.stalemate(\"w\", this.state.squares) &&\n                    this.state.turn == \"w\") == true\n                    ? \"You are in stalemate. Game over.\"\n                    : \"\"}\n                </p>\n                <p className=\"small_font\">\n                  {(this.stalemate(\"b\", this.state.squares) &&\n                    this.state.turn == \"b\") == true\n                    ? \"Black is in stalemate. Game over.\"\n                    : \"\"}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"right_screen bounceInDown\">\n            <div className=\"row_label\"> {row_nums} </div>\n            <div className=\"table\"> {board} </div>\n            <div className=\"col_label\"> {col_nums} </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // view previous turns in the game\n  viewHistory(direction) {\n    if (\n      this.state.history_num - 1 == this.state.turn_num &&\n      this.state.turn == \"b\" &&\n      !this.state.mated\n    ) {\n      return \"not allowed to view history\";\n    }\n\n    let copy_squares = null;\n    let copy_white_collection = null;\n    let copy_black_collection = null;\n\n    if (direction == \"back_atw\") {\n      copy_squares = this.state.history[0].slice();\n      copy_white_collection = [];\n      copy_black_collection = [];\n    } else if (\n      direction == \"next_atw\" &&\n      this.state.history_num < this.state.turn_num + 1\n    ) {\n      copy_squares = this.state.history[this.state.turn_num].slice();\n      copy_white_collection =\n        this.state.history_white_collection[this.state.turn_num];\n      copy_black_collection =\n        this.state.history_black_collection[this.state.turn_num];\n    } else if (direction == \"back\" && this.state.history_num - 2 >= 0) {\n      copy_squares = this.state.history[this.state.history_num - 2].slice();\n      copy_white_collection =\n        this.state.history_white_collection[this.state.history_num - 2];\n      copy_black_collection =\n        this.state.history_black_collection[this.state.history_num - 2];\n    } else if (\n      direction == \"next\" &&\n      this.state.history_num <= this.state.turn_num\n    ) {\n      copy_squares = this.state.history[this.state.history_num].slice();\n      copy_white_collection =\n        this.state.history_white_collection[this.state.history_num];\n      copy_black_collection =\n        this.state.history_black_collection[this.state.history_num];\n    } else {\n      return \"no more history\";\n    }\n\n    copy_squares = clear_possible_highlight(copy_squares).slice();\n    copy_squares = clear_highlight(copy_squares).slice();\n    for (let j = 0; j < 64; j++) {\n      if (copy_squares[j].ascii == (this.state.turn == \"w\" ? \"k\" : \"K\")) {\n        copy_squares[j].in_check = 0;\n        copy_squares[j].checked = 0;\n        break;\n      }\n    }\n\n    var stale =\n      this.stalemate(this.state.true_turn, copy_squares) &&\n      this.state.turn != this.state.true_turn;\n    copy_squares = highlight_mate(\n      this.state.true_turn,\n      copy_squares,\n      this.checkmate(this.state.true_turn, copy_squares),\n      stale\n    ).slice();\n\n    var index = null;\n    if (direction == \"back\") index = this.state.history_num - 2;\n    else if (direction == \"next\") index = this.state.history_num;\n    else if (direction == \"next_atw\") index = this.state.turn_num;\n\n    if (index != 0 && index != null) {\n      if (this.state.history_h1[index] != null) {\n        copy_squares[this.state.history_h1[index]].highlight = 1;\n        copy_squares[this.state.history_h2[index]].highlight = 1;\n      }\n      if (this.state.history_h3[index] != null) {\n        copy_squares[this.state.history_h3[index]].highlight = 1;\n        copy_squares[this.state.history_h4[index]].highlight = 1;\n      }\n    }\n\n    let new_history_num =\n      direction == \"back\"\n        ? this.state.history_num - 1\n        : this.state.history_num + 1;\n    if (direction == \"back_atw\") new_history_num = 1;\n    if (direction === \"next_atw\") new_history_num = this.state.turn_num + 1;\n\n    this.setState({\n      viewing_history: true,\n      just_clicked: true,\n      squares: copy_squares,\n      history_num: new_history_num,\n      turn: this.state.turn == \"w\" ? \"b\" : \"w\",\n      pieces_collected_by_white:\n        copy_white_collection != null\n          ? copy_white_collection\n          : this.state.pieces_collected_by_white,\n      pieces_collected_by_black:\n        copy_black_collection != null\n          ? copy_black_collection\n          : this.state.pieces_collected_by_black,\n    });\n\n    if (direction == \"back_atw\" || direction == \"next_atw\") {\n      this.setState({\n        turn: direction == \"back_atw\" ? \"w\" : this.state.true_turn,\n      });\n    }\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return <Board />;\n  }\n}\n\n// Helper Function for Board Constructor =================\n// initialize the chess board\nfunction initializeBoard() {\n  const squares = Array(64).fill(null);\n  // black pawns\n  for (let i = 8; i < 16; i++) {\n    squares[i] = new Pawn(\"b\");\n  }\n  // white pawns\n  for (let i = 8 * 6; i < 8 * 6 + 8; i++) {\n    squares[i] = new Pawn(\"w\");\n  }\n  // black knights\n  squares[1] = new Knight(\"b\");\n  squares[6] = new Knight(\"b\");\n  // white knights\n  squares[56 + 1] = new Knight(\"w\");\n  squares[56 + 6] = new Knight(\"w\");\n  // black bishops\n  squares[2] = new Bishop(\"b\");\n  squares[5] = new Bishop(\"b\");\n  // white bishops\n  squares[56 + 2] = new Bishop(\"w\");\n  squares[56 + 5] = new Bishop(\"w\");\n  // black rooks\n  squares[0] = new Rook(\"b\");\n  squares[7] = new Rook(\"b\");\n  // white rooks\n  squares[56 + 0] = new Rook(\"w\");\n  squares[56 + 7] = new Rook(\"w\");\n  // black queen & king\n  squares[3] = new Queen(\"b\");\n  squares[4] = new King(\"b\");\n  // white queen & king\n  squares[56 + 3] = new Queen(\"w\");\n  squares[56 + 4] = new King(\"w\");\n\n  for (let i = 0; i < 64; i++) {\n    if (squares[i] == null) squares[i] = new filler_piece(null);\n  }\n\n  return squares;\n}\n\n// Helper Functions for Chess Bot ========================\n// Fisher-Yates shuffle\nfunction shuffle(passed_in_array) {\n  const array = passed_in_array.slice();\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n    [array[i], array[j]] = [array[j], array[i]]; // swap elements\n  }\n  return array;\n}\n// function to reverse an array\nfunction reverseArray(array) {\n  return array.slice().reverse();\n}\n// return value of a piece\nfunction get_piece_value(piece, position) {\n  let pieceValue = 0;\n  if (piece.ascii == null) return 0;\n\n  // these arrays help adjust the piece's value\n  // depending on where the piece is on the board\n  var pawnEvalWhite = [\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0],\n    [1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0],\n    [0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5],\n    [0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0],\n    [0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5],\n    [0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n  ];\n  var pawnEvalBlack = reverseArray(pawnEvalWhite);\n\n  var knightEval = [\n    [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],\n    [-4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0],\n    [-3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0],\n    [-3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0],\n    [-3.0, 0.0, 1.5, 2.0, 2.0, 1.5, 0.0, -3.0],\n    [-3.0, 0.5, 1.0, 1.5, 1.5, 1.0, 0.5, -3.0],\n    [-4.0, -2.0, 0.0, 0.5, 0.5, 0.0, -2.0, -4.0],\n    [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],\n  ];\n\n  var bishopEvalWhite = [\n    [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],\n    [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],\n    [-1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0],\n    [-1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0],\n    [-1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0],\n    [-1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0],\n    [-1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0],\n    [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],\n  ];\n  var bishopEvalBlack = reverseArray(bishopEvalWhite);\n\n  var rookEvalWhite = [\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5],\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n    [0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0],\n  ];\n  var rookEvalBlack = reverseArray(rookEvalWhite);\n\n  var evalQueen = [\n    [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],\n    [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],\n    [-1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],\n    [-0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],\n    [0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],\n    [-1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],\n    [-1.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0],\n    [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],\n  ];\n\n  var kingEvalWhite = [\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n    [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],\n    [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],\n    [2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0],\n    [2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0],\n  ];\n  var kingEvalBlack = reverseArray(kingEvalWhite);\n\n  let x = Math.floor(position / 8);\n  let y = position % 8;\n\n  switch (piece.ascii.toLowerCase()) {\n    case \"p\":\n      pieceValue =\n        100 +\n        10 * (piece.ascii == \"p\" ? pawnEvalWhite[y][x] : pawnEvalBlack[y][x]);\n      break;\n    case \"r\":\n      pieceValue =\n        525 +\n        10 * (piece.ascii == \"r\" ? rookEvalWhite[y][x] : rookEvalBlack[y][x]);\n      break;\n    case \"n\":\n      pieceValue = 350 + 10 * knightEval[y][x];\n      break;\n    case \"b\":\n      pieceValue =\n        350 +\n        10 *\n          (piece.ascii == \"b\" ? bishopEvalWhite[y][x] : bishopEvalBlack[y][x]);\n      break;\n    case \"q\":\n      pieceValue = 1000 + 10 * evalQueen[y][x];\n      break;\n    case \"k\":\n      pieceValue =\n        10000 +\n        10 * (piece.ascii == \"k\" ? kingEvalWhite[y][x] : kingEvalBlack[y][x]);\n      break;\n    default:\n      pieceValue = 0;\n      break;\n  }\n  return piece.player == \"b\" ? pieceValue : -pieceValue;\n}\n\n// Helper Functions for Render ===========================\n// return the color of a square for the chess board\nfunction calc_squareColor(i, j, squares) {\n  let square_color =\n    (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j))\n      ? \"white_square\"\n      : \"black_square\";\n  if (squares[i * 8 + j].highlight == 1) {\n    square_color =\n      (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j))\n        ? \"selected_white_square\"\n        : \"selected_black_square\";\n  }\n  if (squares[i * 8 + j].possible == 1) {\n    square_color =\n      (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j))\n        ? \"highlighted_white_square\"\n        : \"highlighted_black_square\";\n  }\n  if (\n    squares[i * 8 + j].ascii != null &&\n    squares[i * 8 + j].ascii.toLowerCase() == \"k\"\n  ) {\n    if (squares[i * 8 + j].in_check == 1) {\n      square_color =\n        (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j))\n          ? \"in_check_square_white\"\n          : \"in_check_square_black\";\n    }\n    if (squares[i * 8 + j].checked >= 1) {\n      square_color =\n        squares[i * 8 + j].checked == 1 ? \"checked_square\" : \"stale_square\";\n    }\n  }\n  return square_color;\n}\n// return labels for axes of the board\nfunction Label(props) {\n  return <button className={\"label\"}> {props.value} </button>;\n}\n// helper function to help generate arrays of pieces captured by a player\nfunction Collected(props) {\n  return <button className={\"collected\"}> {props.value.icon} </button>;\n}\n\n// Helper Functions to Handle Square Highlighting ========\n// highlight king if in checkmate/stalemate\nfunction highlight_mate(player, squares, check_mated, stale_mated) {\n  const copy_squares = squares.slice();\n  if (check_mated || stale_mated) {\n    for (let j = 0; j < 64; j++) {\n      if (copy_squares[j].ascii == (player == \"w\" ? \"k\" : \"K\")) {\n        copy_squares[j].checked = check_mated == true ? 1 : 2;\n        break;\n      }\n    }\n  }\n  return copy_squares;\n}\n// clear highlights for squares that are selected\nfunction clear_highlight(squares) {\n  const copy_squares = squares.slice();\n  for (let j = 0; j < 64; j++) {\n    if (copy_squares[j].highlight == 1) copy_squares[j].highlight = 0;\n  }\n  return copy_squares;\n}\n// clear highlights for possible destination squares\nfunction clear_possible_highlight(squares) {\n  const copy_squares = squares.slice();\n  for (let j = 0; j < 64; j++) {\n    if (copy_squares[j].possible == 1) copy_squares[j].possible = 0;\n  }\n  return copy_squares;\n}\n// clear the red higlight for checked king\nfunction clear_check_highlight(squares, player) {\n  const copy_squares = squares.slice();\n  for (let j = 0; j < 64; j++) {\n    if (copy_squares[j].ascii == (player == \"w\" ? \"k\" : \"K\")) {\n      copy_squares[j].in_check = 0; // user has heeded warning\n      break;\n    }\n  }\n  return copy_squares;\n}\n\n// Miscellaneous Functions ===============================\n// return if value is even\nfunction isEven(value) {\n  return value % 2;\n}\n\n// =======================================================\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}